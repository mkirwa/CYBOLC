Day 3: Iterables/Slicing/File(I/O)
Day 4: Libraries/name==main /sorting
Day 5: Sets, Dictionaries/Args:kwargs
Day 6: Binary
Day 7: Classes
Day 8: Error Handling /Review
Day 9: Review/Practises 
Day 10: Exam



************************ 01 ***************************************
Use python to produce code below that will create several named variables with the specified value:

Variable	        Value	Type
hello	            hello	string
is_python_awesome	true	boolean
days_in_python	    6	    integer
pie_size	        3.14	float

NOTE: Do not indent your code

############################# SOLUTION ##############################

hello = 'hello'
is_python_awesome = True
days_in_python = 6
pie_size = 3.14

************************ 02 ***************************************

Use Python to produce code below that will convert the provided literal ("Starting Value"), convert it to the indicated data type by using the appropriate Python Built-in Function(s), and assign the output to the named variable as designated below.

Task	            Variable	    Starting Value	    Convert to Type
string to int	    int_input	    "345"	            int
string to float	    pi_4	        "3.1415"	        float
int to string	    hours_str	    40	                string
int to float	    hourly_rate	    15	                float
NOTE: Conversion functions must be called
NOTE: Do not indent your code

############################# SOLUTION ##############################

int_input = int("345")
pi_4 = float("3.1415")
hours_str = str(40)
hourly_rate = float(15)

************************ 03 ***************************************

Use python to produce code below that will create several named variables with the specified value using math operators:

Variable	Value	                    Type
x	        16	                        integer
y	        3	                        integer
xysum	    sum of x and y	            integer
xydiff	    difference of x and y	    integer
xyprod	    product of x and y	        integer
xyquo	    quotient of x and y	        float
xyintquo	integer quotient of x and y	integer
xymod	    modulus of x and y	        integer
NOTE: Do not indent your code

############################# SOLUTION ##############################

x = 16
y = 3
xysum = x + y
xydiff = x - y 
xyprod = x * y 
xyquo = x / y 
xyintquo = x // y 
xymod = x % y

************************ 04 ***************************************

Use python to produce code below that will create several named variables with the specified value using the str.format member function. You may assign any value for the variables other than output. The output variable must use the same boilerplate text and include the appropriate values assigned to the first three.

Identifier	Example Value	                                            Type
name	    Jerry	                                                    str
greeting	Sir	                                                        str
time	    noon	                                                    str
output	    Hello Jerry! Sir, will you be arriving by noon?	            str
NOTE: Do not indent your code

############################# SOLUTION ##############################

name='Jerry'
greeting='Sir'
time='noon'
output = f'Hello {name}! {greeting}, will you be arriving by {time}?'

************************ 05 ***************************************

Use python to produce code below that will perform the following:

    Create a variable named sentence and assign the value 'good for all'
    Turn the sentence variable into a list of individual characters and assign this to a variable named sent_list.
    Change the first (index 0) character in the list to 'f'
    Change the last (index -1) character in the list to '?'
    Combine the list into a new string with periods ('.') in between each character and assign the result to a new variable named output.

NOTE: Do not indent your code

############################# SOLUTION ##############################

sentence = 'good for all'
sent_list = list(sentence)
sent_list[0] = 'f'
sent_list[-1] = '?'
output = str('.'.join(sent_list))

************************ 06 ***************************************
#Read multiple numbers separated by spaces on the same line from the user.
#Change all spaces to a plus sign.
#Print the resulting string to the user.


#Read multiple numbers separated by spaces on the same line from the user.
#Change all spaces to a plus sign.
#Print the resulting string to the user.


############################# SOLUTION ##############################

numbers = input()
numbers = numbers.replace(' ','+')
print(numbers)


************************ 07 ***************************************

Use python to produce code below that will perform the following:

    Read input from the user, the input will be an integer.
    Determine which of the following categories the number fits into an print this to the user:
        Negative Even
        Negative Odd
        Zero
        Positive Even
        Positive Odd

############################# SOLUTION ##############################
    
    num = int(input())
    if num%2==0 and num<0:
        print("Negative Even")
    elif num%2==0 and num>0: 
        print("Positive Even")
    elif num==0: 
        print("Zero")
    elif num%2!=0 and num>0: 
        print("Positive Odd")
    elif num%2!=0 and num<0: 
        print("Negative Odd")

************************ 00 ***************************************

Use python to produce code below that will:

    Given an email address in email
    Convert the email into a list named `lst'
    The list will contain all individual parts of the email
    Example: email = 'alan.m.turing@genius.com' -> lst = ['alan','m','turing', 'genius', 'com']
    NOTE: A variable named email will be available to your code when running.
    NOTE: You must create a variable named lst which contains the required data.
    NOTE: Do not indent your code

############################# SOLUTION ##############################

temp = email.split('.')
temp2 = '@'.join(temp)
lst = temp2.split('@')

************************ 00A ***************************************

FizzBuzz is an interview question that is said to filter out 99.5% of programming job candidates.

Add code so that it takes a number from the user and prints it (the number) if it isnâ€™t divisible by 3 or 5. For multiples of 3 print 'fizz' instead. For multiples of 5 print 'buzz' instead. For multiples of 3 and 5 print 'fizzbuzz'.

############################# SOLUTION ##############################

num = int(input())
if (num%3==0 and num%5==0):
    print('fizzbuzz')
elif(num%3==0):
    print('fizz')
elif (num%5==0):
    print('buzz')
else:
    print(num)

************************ 08 ***************************************

Use python to produce code below that will perform the following:

    Read multiple numbers separated by spaces on the same line from the user.
    Change all spaces to a plus sign.
    Print the resulting string to the user.
NOTE: Do not indent your code

############################# SOLUTION ##############################

numbers = input()
numbers = numbers.replace(' ','+')
print(numbers)



************************ 08 ***************************************
Use python to produce code below that will perform the following:
    Create a function named domath that will accept 3 parameters.
    The function will add the first two parameters and multiply this sum by the third parameter.
    You can select the identifiers for each of the parameters.
The resulting product will be returned to the caller.

############################# SOLUTION ##############################


def domath(param1,param2,param3):
    sum = (param1+param2)*param3
    return sum

************************ 09 ***************************************

Use python to produce code below that will perform the following:

Read multiple lines from the user on standard input until an empty string is read.
Return a list of all these lines without line terminators
Each line should be reversed from how it is read in.
def reverseit():
    pass 

############################# SOLUTION ##############################

def reverseit():
    word2 = []
    word4 = []
    while True:
        word = input()
        if not word:
            break
        for i in range(len(word)):
            word2.append(word[-i-1])
        word3 = ''.join(word2)
        print(word3)
        word4.append(word3)

        word2.clear()
        
    return word4

************************ OOB ***************************************

Modify code below and implement guess_number so that it repeatedly asks the user for a number between 0 and 100, inclusive. If the user correctly guesses the value of the given argument n, print 'WIN' and return. Otherwise, indicate whether the guess was too high or too low.

def guess_number(n):
    pass

guess_number(23)

############################# SOLUTION ##############################

def guess_number(n):

    temp = True
    while temp:
        num = int(input())
        if num==n:
            print('WIN')
            temp = False
        elif num>n:
            print('too high')
        elif num<n:
            print('too low')

guess_number(23)


************************ 10 ***************************************

Use python to produce code below that will perform the following:

Given a mixed case string as parameter s
Capitalize every letter with an even index within the string.
Lowercase every letter with an odd index within the string.
Return the resulting string.
Example - Given: "ABCDEF ghijkl" Return: "AbCdEf gHiJkL"
def leetString(s):
    pass

############################# SOLUTION ##############################

def leetString(s):
    emptyList = []
    lists = list(s)

    for i in range(0,len(lists)):
        if(i%2==0):
            emptyList.append(lists[i].upper())
        if(i%2!=0):
            emptyList.append(lists[i].lower())
    newword = ''.join(emptyList)
    return newword

************************ 11 ***************************************

Use python to produce code that will perform the following:

First, print out every even number on a separate line from provided parameter first to parameter last, inclusive.
Next, print out every odd number from first to last, inclusive.
def evensandodds(first, last):
   pass 


############################# SOLUTION ##############################

def evensandodds(first, last):
    for i in range(first, last + 1):
        if i % 2 == 0:
            print(i)

    
    for i in range(first, last + 1):
        if i % 2 != 0:
            print(i)

************************ 12 ***************************************

def user_io():
    '''
    Returns a list of items read from the user until the user enters an empty string.

    Args:
        None
    Returns:
        list: a list of strings
    '''    
    pass

############################# SOLUTION ##############################

def user_io():
    '''
    Returns a list of items read from the user until the user enters an empty string.

    Args:
        None
    Returns:
        list: a list of strings
    '''  
    word2 = []
    while True:
        word = list(input())
        if not word:
            break
        word2.append(''.join(word))
    return word2

************************ 13 ***************************************

def make_tuple():
    '''
     Returns a tuple of the multiples of 10 from 1 to 100 inclusive.
     Args:
         None
     Returns:
         tuple: a tuple of the multiples of 10 from 1 to 100 inclusive
     '''
     pass    

############################# SOLUTION ##############################

def make_tuple():
    return tuple(range(10,101,10))

************************ 13-1- ***************************************

def make_tuple(a,b):
    '''
    Returns a tuple of the multiples of 10 from a to b inclusive.
    Args:
        None
    Returns:
        tuple: a tuple of the multiples of 10 from a to b inclusive
    '''      

############################# SOLUTION ##############################

def make_tuple(a,b):
    listTuple = []
    for i in range(a,b+1):
        if i%10==0:
            listTuple.append(i)
    return tuple(listTuple)

************************ 14 ***************************************

def strings():
    '''
    Returns a tuple of the following two strings:

    

    Physics is the universe's operating system

    Args:
        None
    Returns:
        tuple: a tuple of strings
     '''
    pass   

############################# SOLUTION ##############################

def strings():
    word = ('',"Physics is the universe's operating system")
    return word

************************ 15 ***************************************

def disect(lst):
    '''
    Returns a tuple of the given list split into two equally sized halves.
    The given list will always consist of an even number of elements.
    Args:
        lst (lst): a list of elements
    Returns:
        tuple: a tuple of two lists
    '''
    pass     

############################# SOLUTION ##############################

def disect(lst):
    numberLength = len(lst)
    halve = numberLength/2
    print(halve)
    tuple1 = lst[0:int(halve)]
    tuple2 = lst[int(halve):numberLength]

    finalList = tuple([tuple1,tuple2])
    return finalList

************************ 16 ***************************************

def reverse_string(strng):
    '''
    Returns a copy of the given string reversed
    Args:
        strng (str): a string of alphanumeric characters
    Returns:
        str: a copy of the given string reversed
    '''    
    pass   

############################# SOLUTION ##############################

def reverse_string(strng):
    '''
    Returns a copy of the given string reversed
    Args:
        strng (str): a string of alphanumeric characters
    Returns:
        str: a copy of the given string reversed
    '''    
    return strng[::-1]

************************ 17 ***************************************

Return a list of ordinals for every character in the given string

Hint: https://docs.python.org/3/library/functions.html#ord
def code_points(strng):
   pass   

############################# SOLUTION ##############################

def code_points(strng):
    listtemp_points = []
    tempcode_points = list(strng)
    for i in tempcode_points:
        listtemp_points.append(ord(i))

    return listtemp_points

************************ 18 ***************************************

Use python to produce code below that will perform the following:

Read file specified by the path in inpath parameter and write all lines to the file specified by the outpath parameter.
Before writing out each line, add the line number starting with 1 follow by colon and space.
def linenums(inpath, outpath):
    pass 

############################# SOLUTION ##############################


def linenums(inpath, outpath):
    with open(inpath, 'r') as inpath_file:
        inpath_file_outpt = inpath_file.readlines()

    with open(outpath, 'w') as outfile:
        for index, line in enumerate(inpath_file_outpt, start=1):
            outfile.write(f"{index}: {line}")

************************ 10 ***************************************
Use python to produce code below that will perform the following:

Read multiple lines from the user on standard input until an empty string is read.
Return a list of all these lines without line terminators
Each line should be reversed from how it is read in.

############################# SOLUTION ##############################


def domath(param1,param2,param3):
    sum = (param1+param2)*param3
    return sum


************************ 18-1 ***************************************
"Sometimes my cousin is just mean. He sent me a file with a special message but made it into a crazy series of ones and zeros. He told me each letter was on its own line, and could be converted into an Unicode character. Can you help me by decoding his message?"

Each line will be a string character. You will need to convert the string Ones and Zeros into an integer (but these are not base 10, so keep that in mind) and then pass that data to code that will convert it to its corresponding Unicode character. Thanks to Python's "batteries included" philosophy, there are two Python built-in functions that can help handle this for you.

Hint: https://docs.python.org/3/library/functions.html#int
Hint: https://docs.python.org/3/library/functions.html#chr
def tough_read(fname):
    '''
    Args:
        fname (str): path to a file where the input is located
    Returns:
        str: Sentence that was decoded
    '''
    pass 
NOTE: If you wish to create a file in the format that fname is in, the following code can create the file from a Bash Shell. This command will place the file in the directory of wherever this command is ran, and you will have to assign fname to the file name (either absolute or relative paths) in order to verify your code on your local system.


python3 -c "with open('act18_1.txt','w') as fp: fp.writelines(['{:08b}\n'.format(ord(c)) for c in 'Be all that you can be']); fp.  close()"

############################# SOLUTION ##############################

def tough_read(fname):
    """ Args: fname (str): path to a file where the input is located Returns: str: Sentence that was decoded """
    integers = []
    with open(fname, 'r') as f:
        binary_string = f.readlines()


    for b in binary_string:
        integers.append(chr(int(b,base=2)))

    # Convert the list of integers to a Unicode string
    unicode_string = ''.join(integers)
    
    return unicode_string

************************ 18-2 ***************************************

"You have a artist friend that likes to jot down some inspirational words when the mood strikes. These fits of inspiration always have a theme that they need to remember with the messages. Your friend needs some help keeping track. Read each of the inspirational messages from the user and write them to the end of the file specified by fname. Since the theme is important and must be remembered, add the theme and a colon before each message and ensure each inspirational message is on its own line. An empty input will indicate no more entries and the end of the theme."

Example:

If theme was "Razzmatazz", and the input from the user was "I like nonsense; it wakes up the brain cells. - Dr. Seuss", the resulting string would be formated as follows: Razzmatazz:I like nonsense; it wakes up the brain cells. - Dr. Seuss

Important:

What if there are other lines to be added? What else seperates lines in a file? What needs to be added to the example line above?
Do not overwrite the file. What mode should you open the file in?
def log_to_file(fname, theme):
    '''
    Args:
        fname (str): Path to an existing file that includes previous inspirational messages to keep.
        theme (str): Theme to be placed on each line.
    Returns:
        None
    '''
    pass 

############################# SOLUTION ##############################

def log_to_file(fname, theme):
    '''
    Args:
        fname (str): Path to an existing file that includes previous inspirational messages to keep.
        theme (str): Theme to be placed on each line.
    Returns:
        None
    '''
    # Open the file in 'append' mode
    with open(fname, 'a') as file:
        while True:
            user_input = input("Enter an inspirational message (or leave it empty to finish): ")
            if not user_input:
                break  # Exit the loop if the input is empty
            formatted_message = f'{theme}:{user_input}\n'  # Format the message
            file.write(formatted_message)  # Write the message to the file


#with open('new.txt','w') as new:
    #lines = ['line 1\n','line 2\n','line 3\n']
    #new.writelines(lines)

************************ 18-3 ***************************************

Replace all found instances of the individual tuple entries in the file found at in_path. Replacements will be in the list reps as a list of tuples. Each tuple entry will contain the 'find' as the first element and the 'replace' will be the second element. Write the result to the file specified with out_path.

Example:

List of Tuples example - [("taken","delivered"),("cat","dog"),("outside","beyond"),("straightaway","forthwith"),("possibly","perchance")]
Original string example - "The cat possibly needs to be taken outside, straightaway."
Changed string example - "The dog perchance needs to be delivered beyond, forthwith."
def replace_in_file(in_path, out_path, reps):
    '''
    Args:
        in_path (str): input file path
        out_path (str): output file path
        reps (list): list of tuples containing ("find", "replace") mappings
    Returns:
        None
    '''
    pass 

############################# SOLUTION ##############################

def replace_in_file(in_path, out_path, reps):
    temporary_values = dict(reps)
    with open(in_path, 'r') as newOne, open(out_path, 'w') as newOneTwo:
        for line in newOne:
            for find, replace in temporary_values.items():
                line = line.replace(find, replace)
            newOneTwo.write(line)


************************ 19 ***************************************

def grab(lst):
    '''
    Returns a randomly chosen item from the given list (lst).
    Args:
        lst (list): a list of items
    Returns:
        item (?): an item from the list
    '''    

############################# SOLUTION ##############################

import random
def grab(lst):
    '''
    Returns a randomly chosen item from the given list (lst).
    Args:
        lst (list): a list of items
    Returns:
        item (?): an item from the list
    '''    
    return random.choice(lst)


************************ 20 ***************************************

def get_hash(data="python"):
    '''
    Returns the SHA3 256-bit hash of the data provided.
    You will need to use the hashlib python library to complete this challenge.
       
    NOTE: The first call will use the string "python" later calls will use random strings
    NOTE: You can convert a string into a bytes-like object which is needed for hashing with: 
             
    data.encode("utf-8")
    
    NOTE: You can create a bytes-like object out of a literal by adding a b in front of the string, ie b"python" or b'python'
       
    Args:
        data (str): data to be encoded
    Returns:
        str : The SHA3 256-bit hash of the provided data
    '''    

############################# SOLUTION ##############################

import hashlib

def get_hash(data="python"):
    '''
    Returns the SHA3 256-bit hash of the data provided.
    You will need to use the hashlib python library to complete this challenge.
       
    NOTE: The first call will use the string "python" later calls will use random strings
    NOTE: You can convert a string into a bytes-like object which is needed for hashing with: 
             
    data.encode("utf-8")
    
    NOTE: You can create a bytes-like object out of a literal by adding a b in front of the string, ie b"python" or b'python'
       
    Args:
        data (str): data to be encoded
    Returns:
        str : The SHA3 256-bit hash of the provided data
    '''    
    temp1 = data.encode('utf-8')
    temp2 = hashlib.sha3_256(temp1)
    return temp2.hexdigest()

************************ 21 ***************************************

Write a script that implements a function, find_product, which takes two numbers and returns the product. Use the name=='__main__' idiom to prompt the user for two integers a print the result of calling find_product using those integers.

############################# SOLUTION ##############################

def find_product(a,b):
    return a * b
if __name__== "__main__":
    user_input_1 = int(input())
    user_input_2 = int(input())
    print(find_product(user_input_1,user_input_2))

************************ 22 ***************************************

Write a function, round_to_position, which takes a list of floats and returns a new list with the original floats each rounded to the number of digits of precision after the decimal point corresponding to the original float's position in the list.

def round_to_position(lst):
    pass

############################# SOLUTION ##############################

def round_to_position(lst):
    return [round(value, index) for index, value in enumerate(lst)]

************************ 23 ***************************************

def get_type_str(obj):
    '''
    Returns the type of the parameter as a string.
    Possible types are:
    

      
string

      
boolean

      
integer

      
float

      
list

      
tuple

    

    NOTE: Any other types should be identified with 'unknown'
       
    Args:
        obj (?): The object that should be classified
    Returns:
        str : The type of the provided data
    '''   

############################# SOLUTION ##############################

def get_type_str(obj):
    obj = type(obj)
    if obj == str:
        return "string"
    elif obj == bool:
        return "boolean"
    elif obj == int:
        return "integer"
    elif obj == float:
        return "float"
    elif obj == list:
        return "list"
    elif obj == tuple:
        return "tuple"
    else:
        return str("unknown")

************************ 24 ***************************************

Use python to produce code below that will perform the following:

The file specified by fname contains some text.
A list of words is provided as the parameter words.
Return a list of all the words found in the file that are NOT contained in the list of words in parameter.
Each word in the file will be separated by at least one character of whitespace.
def diffwords(fname, words):
    pass 

############################# SOLUTION ##############################

def diffwords(fname, words):
    with open(fname, 'r') as filein:
        text = set(filein.read().split())
        diff = text.difference(words)
    
    return diff

************************ 25 ***************************************
def count_words(filepath):
    '''
    Count the occurrences of each word in the file. Create a dictionary that contains each word in the file as a key
    and the value for each key will contain the number of times each words is found in the file. Words will be
    separated by one or more whitespace characters spread over multiple lines.
       
    Args:
        filepath (str): The path to the file
    Returns:
        dict : keys - words
               values - number of times each word appears
    '''

############################# SOLUTION ##############################

def count_words(filepath):
        #with open(filepath, 'r') as new_file:
        #read_new_file = new_file.read()
    read_new_file = open(filepath, "r") 
    # Create an empty dictionary 
    d = dict() 

    # Loop through each line of the file 
    for line in read_new_file: 
        # Remove the leading spaces and newline character 
        line = line.strip() 

        # Split the line into words 
        words = line.split(" ") 

        # Iterate over each word in line 
        for word in words: 
            print(word)
            # Check if the word is already in dictionary 
            # crayons['orange'] = 'mango' 
            if word in d: 
                # Increment count of word by 1 
                d[word] = d[word] + 1
            else: 
                # Add the word to dictionary with count 1 
                d[word] = 1

    return d

************************ 26 ***************************************

Use python to produce code below that will perform the following:

    Create a function called infinitearguments that will:
    Print to standard output all positional arguments, in the order received, on separate lines.
    Followed immediately by all keyword arguments in the form keyword=value in keyword alphabetic order.

############################# SOLUTION ##############################

def infinitearguments(*args, **kwargs):
    for arg in args:
        print(arg)
    
    myKeys = list(kwargs.keys())
    myKeys.sort()
    sorted_dict = {i: kwargs[i] for i in myKeys}
    
    for key, value in sorted_dict.items():
        print(f'{key}={value}')

************************ 27 ***************************************

def sort_ascii(filepath):
    '''
    Read all lines from file in `filepath` and return a list of all lines in case-insensitive ASCII order.
    Remove all linebreaks before sorting.
       
    Args:
        filepath (str): The path to the file
    Returns:
        list : lines from input file sorted into ASCII order without linebreaks
    '''

############################# SOLUTION ##############################

def sort_ascii(filepath):
    with open(filepath, 'r') as file:
        temp = []
        for line in file.readlines():
            temp.append(line.strip())
        sorted_temp = sorted(temp, key=lambda s: s.lower())
        return sorted_temp

************************ 28 ***************************************

def sort_length(filepath):
    '''
    Read all lines from file in `filepath` and return a list of all lines sorted longest to shortest.
    Remove all linebreaks before sorting.
       
    Args:
        filepath (str): The path to the file
    Returns:
        list : lines from input file sorted longest to shortest without linebreaks
    '''

############################# SOLUTION ##############################

def sort_length(filepath):
    with open(filepath, 'r') as file:
        temp = []
        for line in file.readlines():
            temp.append(line.strip())
        
    sorted_temp = sorted(temp, key=len, reverse=True)
    
    return sorted_temp

************************ 29 ***************************************

def sort_embedded(filepath):
    '''
    Read all lines from file in `filepath` and return a list of all lines sorted numerically by
    the number at character positions 10 to 15 in each line..
    Remove all linebreaks before sorting.
    
    Example: The embedded number is 561234 below. Copy and paste this into a text file to test your function:
		
    Here is a561234 long line of text from the file.
       
    Args:
        filepath (str): The path to the file
    Returns:
        list : lines from input file numerically sorted on the embedded number without linebreaks
    '''


############################# SOLUTION ##############################

def sort_embedded(filepath):
    with open(filepath, 'r') as file:
        temp = []
        for line in file.readlines():
            temp.append(line.strip())
    def extract_embedded_number(line):
        return int(line[9:15]) 
    
    sorted_temp = sorted(temp, key=extract_embedded_number)
        
    return sorted_temp









################################### Challenges Website Solutions ##############################
def zap(list1, list2):
    #list_temp = []
    #newTuple = ()
    
    #for i,j in enumerate(list2):
        #newTuple+=[list1[i],list2[i]]
        #list_temp.append(list1[i],list2[i])
    new_tuple = list(map(lambda x,y:(x,y), list1,list2))
    return new_tuple
#def zap(list1, list2):
#    zipped = zip(list1,list2)
#    return list(zipped)

list1_ = [0, 1, 2, 3]
list2_ = [5, 6, 7, 8]
zap(list1_,list2_)









def convert(list_numbers):
    return list(map(str,list_numbers))
    
list_numbers = [1,2,3,4]
print(convert(list_numbers))



