Day 3: Iterables/Slicing/File(I/O)
Day 4: Libraries/name==main /sorting
Day 5: Sets, Dictionaries/Args:kwargs
Day 6: Binary
Day 7: Classes
Day 8: Error Handling /Review
Day 9: Review/Practises 
Day 10: Exam



************************ 01 ***************************************
Use python to produce code below that will create several named variables with the specified value:

Variable	        Value	Type
hello	            hello	string
is_python_awesome	true	boolean
days_in_python	    6	    integer
pie_size	        3.14	float

NOTE: Do not indent your code

############################# SOLUTION ##############################

hello = 'hello'
is_python_awesome = True
days_in_python = 6
pie_size = 3.14

************************ 02 ***************************************

Use Python to produce code below that will convert the provided literal ("Starting Value"), convert it to the indicated data type by using the appropriate Python Built-in Function(s), and assign the output to the named variable as designated below.

Task	Variable	Starting Value	Convert to Type
string to int	int_input	"345"	int
string to float	pi_4	"3.1415"	float
int to string	hours_str	40	string
int to float	hourly_rate	15	float
NOTE: Conversion functions must be called
NOTE: Do not indent your code

############################# SOLUTION ##############################

int_input = int("345")
pi_4 = float("3.1415")
hours_str = str(40)
hourly_rate = float(15)

************************ 03 ***************************************

Use python to produce code below that will create several named variables with the specified value using math operators:

Variable	Value	                    Type
x	        16	                        integer
y	        3	                        integer
xysum	    sum of x and y	            integer
xydiff	    difference of x and y	    integer
xyprod	    product of x and y	        integer
xyquo	    quotient of x and y	        float
xyintquo	integer quotient of x and y	integer
xymod	    modulus of x and y	        integer
NOTE: Do not indent your code

############################# SOLUTION ##############################

x = 16
y = 3
xysum = x + y
xydiff = x - y 
xyprod = x * y 
xyquo = x / y 
xyintquo = x // y 
xymod = x % y

************************ 04 ***************************************

Use python to produce code below that will create several named variables with the specified value using the str.format member function. You may assign any value for the variables other than output. The output variable must use the same boilerplate text and include the appropriate values assigned to the first three.

Identifier	Example Value	                                            Type
name	    Jerry	                                                    str
greeting	Sir	                                                        str
time	    noon	                                                    str
output	    Hello Jerry! Sir, will you be arriving by noon?	            str
NOTE: Do not indent your code

############################# SOLUTION ##############################

name='Jerry'
greeting='Sir'
time='noon'
output = f'Hello {name}! {greeting}, will you be arriving by {time}?'

************************ 05 ***************************************

Use python to produce code below that will perform the following:

    Create a variable named sentence and assign the value 'good for all'
    Turn the sentence variable into a list of individual characters and assign this to a variable named sent_list.
    Change the first (index 0) character in the list to 'f'
    Change the last (index -1) character in the list to '?'
    Combine the list into a new string with periods ('.') in between each character and assign the result to a new variable named output.

NOTE: Do not indent your code

############################# SOLUTION ##############################

sentence = 'good for all'
sent_list = list(sentence)
sent_list[0] = 'f'
sent_list[-1] = '?'
output = str('.'.join(sent_list))

************************ 06 ***************************************
#Read multiple numbers separated by spaces on the same line from the user.
#Change all spaces to a plus sign.
#Print the resulting string to the user.


#Read multiple numbers separated by spaces on the same line from the user.
#Change all spaces to a plus sign.
#Print the resulting string to the user.


############################# SOLUTION ##############################

numbers = input()
numbers = numbers.replace(' ','+')
print(numbers)

************************ 07 ***************************************

Use python to produce code below that will:

    Given an email address in email
    Convert the email into a list named `lst'
    The list will contain all individual parts of the email
    Example: email = 'alan.m.turing@genius.com' -> lst = ['alan','m','turing', 'genius', 'com']
    NOTE: A variable named email will be available to your code when running.
    NOTE: You must create a variable named lst which contains the required data.
    NOTE: Do not indent your code

############################# SOLUTION ##############################

temp = email.split('.')
temp2 = '@'.join(temp)
lst = temp2.split('@')

************************ 08 ***************************************

Use python to produce code below that will perform the following:

    Read multiple numbers separated by spaces on the same line from the user.
    Change all spaces to a plus sign.
    Print the resulting string to the user.
NOTE: Do not indent your code

############################# SOLUTION ##############################

numbers = input()
numbers = numbers.replace(' ','+')
print(numbers)

************************ 09 ***************************************
Use python to produce code below that will perform the following:
    Create a function named domath that will accept 3 parameters.
    The function will add the first two parameters and multiply this sum by the third parameter.
    You can select the identifiers for each of the parameters.
The resulting product will be returned to the caller.

############################# SOLUTION ##############################


def domath(param1,param2,param3):
    sum = (param1+param2)*param3
    return sum

************************ 10 ***************************************
Use python to produce code below that will perform the following:

Read multiple lines from the user on standard input until an empty string is read.
Return a list of all these lines without line terminators
Each line should be reversed from how it is read in.

############################# SOLUTION ##############################


def domath(param1,param2,param3):
    sum = (param1+param2)*param3
    return sum


************************ 18 ***************************************
"Sometimes my cousin is just mean. He sent me a file with a special message but made it into a crazy series of ones and zeros. He told me each letter was on its own line, and could be converted into an Unicode character. Can you help me by decoding his message?"

Each line will be a string character. You will need to convert the string Ones and Zeros into an integer (but these are not base 10, so keep that in mind) and then pass that data to code that will convert it to its corresponding Unicode character. Thanks to Python's "batteries included" philosophy, there are two Python built-in functions that can help handle this for you.

Hint: https://docs.python.org/3/library/functions.html#int
Hint: https://docs.python.org/3/library/functions.html#chr
def tough_read(fname):
    '''
    Args:
        fname (str): path to a file where the input is located
    Returns:
        str: Sentence that was decoded
    '''
    pass 
NOTE: If you wish to create a file in the format that fname is in, the following code can create the file from a Bash Shell. This command will place the file in the directory of wherever this command is ran, and you will have to assign fname to the file name (either absolute or relative paths) in order to verify your code on your local system.


python3 -c "with open('act18_1.txt','w') as fp: fp.writelines(['{:08b}\n'.format(ord(c)) for c in 'Be all that you can be']); fp.  close()"

############################# SOLUTION ##############################

def tough_read(fname):
    """ Args: fname (str): path to a file where the input is located Returns: str: Sentence that was decoded """
    integers = []
    with open(fname, 'r') as f:
        binary_string = f.readlines()


    for b in binary_string:
        integers.append(chr(int(b,base=2)))

    # Convert the list of integers to a Unicode string
    unicode_string = ''.join(integers)
    
    return unicode_string

************************ 19 ***************************************

"You have a artist friend that likes to jot down some inspirational words when the mood strikes. These fits of inspiration always have a theme that they need to remember with the messages. Your friend needs some help keeping track. Read each of the inspirational messages from the user and write them to the end of the file specified by fname. Since the theme is important and must be remembered, add the theme and a colon before each message and ensure each inspirational message is on its own line. An empty input will indicate no more entries and the end of the theme."

Example:

If theme was "Razzmatazz", and the input from the user was "I like nonsense; it wakes up the brain cells. - Dr. Seuss", the resulting string would be formated as follows: Razzmatazz:I like nonsense; it wakes up the brain cells. - Dr. Seuss

Important:

What if there are other lines to be added? What else seperates lines in a file? What needs to be added to the example line above?
Do not overwrite the file. What mode should you open the file in?
def log_to_file(fname, theme):
    '''
    Args:
        fname (str): Path to an existing file that includes previous inspirational messages to keep.
        theme (str): Theme to be placed on each line.
    Returns:
        None
    '''
    pass 

############################# SOLUTION ##############################

def log_to_file(fname, theme):
    '''
    Args:
        fname (str): Path to an existing file that includes previous inspirational messages to keep.
        theme (str): Theme to be placed on each line.
    Returns:
        None
    '''
    # Open the file in 'append' mode
    with open(fname, 'a') as file:
        while True:
            user_input = input("Enter an inspirational message (or leave it empty to finish): ")
            if not user_input:
                break  # Exit the loop if the input is empty
            formatted_message = f'{theme}:{user_input}\n'  # Format the message
            file.write(formatted_message)  # Write the message to the file


#with open('new.txt','w') as new:
    #lines = ['line 1\n','line 2\n','line 3\n']
    #new.writelines(lines)

************************ 20 ***************************************

Replace all found instances of the individual tuple entries in the file found at in_path. Replacements will be in the list reps as a list of tuples. Each tuple entry will contain the 'find' as the first element and the 'replace' will be the second element. Write the result to the file specified with out_path.

Example:

List of Tuples example - [("taken","delivered"),("cat","dog"),("outside","beyond"),("straightaway","forthwith"),("possibly","perchance")]
Original string example - "The cat possibly needs to be taken outside, straightaway."
Changed string example - "The dog perchance needs to be delivered beyond, forthwith."
def replace_in_file(in_path, out_path, reps):
    '''
    Args:
        in_path (str): input file path
        out_path (str): output file path
        reps (list): list of tuples containing ("find", "replace") mappings
    Returns:
        None
    '''
    pass 

############################# SOLUTION ##############################

def replace_in_file(in_path, out_path, reps):
    temporary_values = dict(reps)
    with open(in_path, 'r') as newOne, open(out_path, 'w') as newOneTwo:
        for line in newOne:
            for find, replace in temporary_values.items():
                line = line.replace(find, replace)
            newOneTwo.write(line)
            
************************ 21 ***************************************












################################### Challenges Website Solutions ##############################
def zap(list1, list2):
    #list_temp = []
    #newTuple = ()
    
    #for i,j in enumerate(list2):
        #newTuple+=[list1[i],list2[i]]
        #list_temp.append(list1[i],list2[i])
    new_tuple = list(map(lambda x,y:(x,y), list1,list2))
    return new_tuple
#def zap(list1, list2):
#    zipped = zip(list1,list2)
#    return list(zipped)

list1_ = [0, 1, 2, 3]
list2_ = [5, 6, 7, 8]
zap(list1_,list2_)









def convert(list_numbers):
    return list(map(str,list_numbers))
    
list_numbers = [1,2,3,4]
print(convert(list_numbers))



