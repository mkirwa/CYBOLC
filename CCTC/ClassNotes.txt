




######################################################################################################################################################
#########################################################                                    #########################################################
#########################################################            ROUGHT DRAFT            #########################################################
#########################################################                                    #########################################################
######################################################################################################################################################


Get-Item Registry::HKEY_CURRENT_USER\SOFTWARE\MICROSOFT\WINDOWS\CURRENTVERSION\RUN



$RegistryKey = $Registry.OpenSubKey('HKCU:HKEY_CURRENT_USER\SOFTWARE\MICROSOFT\WINDOWS\CURRENTVERSION\RUN', $true)


path -> 'HKCU:HKEY_CURRENT_USER\SOFTWARE\MICROSOFT\WINDOWS\CURRE
NTVERSION\RUN'

path -> HKEY_CURRENT_USER\SOFTWARE\MICROSOFT\WINDOWS\CURRENTVERSION\RUN


Get-item -Path 'HKCU:SOFTWARE\MICROSOFT\WINDOWS\CURRENTVERSION\RUN'

Get-ItemProperty -Path 'HKCU:\SOFTWARE\MICROSOFT\WINDOWS\CURRENTVERSION\RUN'

Get-ItemProperty -Path 'HKLM:\SOFTWARE\MICROSOFT\WINDOWS\CURRENTVERSION\RUN'

Get-ItemProperty -Path 'HKLM:\HKEY_LOCAL_MACHINE\SOFTWARE\MICROSOFT\WINDOWS\CURRENTVERSION\RUN'

Get-item -Path 'HKCU:HKEY_CURRENT_USER\SOFTWARE\MICROSOFT\WINDOWS\CURRENTVERSION\RUN'

Get-ItemProperty -Path 'HKCU:\HKEY_CURRENT_USER\SOFTWARE\MICROSOFT\WINDOWS\CURRENTVERSION\RUN'



Get-ChildItem -Path 'HKCU:\HKEY_CURRENT_USER\SOFTWARE\MICROSOFT\WINDOWS\CURRENTVERSION\RUN'

reg query HKCU:HKEY_CURRENT_USER\SOFTWARE\MICROSOFT\WINDOWS\CURRENTVERSION\RUN


# Backup the zip file
Copy-Item -Path "C:\Users\CTF\Documents\Omega1000.zip" -Destination "C:\Users\CTF\Desktop\Omega1000.zip"

# Initial directory to work in
$workDirectory = "C:\Users\CTF\Documents"

# Loop to unzip the file 1,000 times
for ($i = 0; $i -lt 1000; $i++) {
    # Get the path of the zip file in the current iteration
    $currentZip = Get-ChildItem -Path $workDirectory -Filter "*.zip" | Select-Object -First 1 -ExpandProperty FullName
    
    # Unzip the file
    Expand-Archive -Path $currentZip -DestinationPath $workDirectory

    # Remove the original zip file of this iteration to avoid c$onfusion in the next iteration
    Remove-Item -Path $currentZip
}

# At the end of the loop, assuming the final file is not a zip, read its contents
$finalFile = Get-ChildItem -Path $workDirectory | Where-Object { $_.Extension -ne ".zip" } | Select-Object -First 1 -ExpandProperty FullName
Get-Content -Path $finalFile




$workDirectory = "C:\Users\CTF\Documents"

for ($i = 0; $i -lt 1000; $i++) {
    $currentZip = Get-ChildItem -Path $workDirectory -Filter "*.zip" | Select-Object -First 1 -ExpandProperty FullName
    Expand-Archive -Path $currentZip -DestinationPath $workDirectory
    Remove-Item -Path $currentZip
}
$finalFile = Get-ChildItem -Path $workDirectory | Where-Object { $_.Extension -ne ".zip" } | Select-Object -First 1 -ExpandProperty FullName
Get-Content -Path $finalFile



# Backup the zip file
Copy-Item -Path "C:\Users\CTF\Documents\Omega1000.zip" -Destination "C:\Users\CTF\Desktop\Omega1000.zip"

# Initial directory to work in
$workDirectory = "C:\Users\CTF\Documents"

# Loop to unzip the file 1,000 times
for ($i = 0; $i -lt 1000; $i++) {
    # Get the path of the zip file in the current iteration
    $currentZip = Get-ChildItem -Path $workDirectory -Filter "*.zip" | Select-Object -First 1 -ExpandProperty FullName
    
    # If no zip file found, break out of the loop
    if (-not $currentZip) {
        Write-Host "No zip file found in iteration $i"
        break
    }

    # Unzip the file
    Expand-Archive -Path $currentZip -DestinationPath $workDirectory

    # Remove the original zip file of this iteration to avoid confusion in the next iteration
    Remove-Item -Path $currentZip
}

# At the end of the loop, assuming the final file is not a zip, read its contents
$finalFile = Get-ChildItem -Path $workDirectory | Where-Object { $_.Extension -ne ".zip" } | Select-Object -First 1 -ExpandProperty FullName
Get-Content -Path $finalFile


Copy-Item -Path "C:\Users\CTF\Desktop\Omega1000.zip" -Destination "C:\Users\CTF\Documents\Omega1000.zip"





Copy-Item -Path "C:\Users\CTF\Documents\Omega1000.zip" -Destination "C:\Users\CTF\Desktop\Omega1000.zip"
$workDirectory = "C:\Users\CTF\Documents"
for ($i = 0; $i -lt 1000; $i++) {
    $currentZip = Get-ChildItem -Path $workDirectory -Filter "*.zip" | Select-Object -First 1 -ExpandProperty FullName
    if (-not $currentZip) {
        Write-Host "No zip file found in iteration $i"
        break
    }
    Expand-Archive -Path $currentZip -DestinationPath $workDirectory

    Remove-Item -Path $currentZip
}
$finalFile = Get-ChildItem -Path $workDirectory | Where-Object { $_.Extension -ne ".zip" } | Select-Object -First 1 -ExpandProperty FullName
Get-Content -Path $finalFile




# Backup the zip file
Copy-Item -Path "C:\Users\CTF\Documents\Omega1000.zip" -Destination "C:\Users\CTF\Desktop\Omega1000.zip"

# Initial directory to work in
$workDirectory = "C:\Users\CTF\Documents"

# Loop to unzip the file 1,000 times
for ($i = 0; $i -lt 1000; $i++) {
    # Get the path of the zip file in the current iteration
    $currentZip = Get-ChildItem -Path $workDirectory -Filter "*.zip" | Select-Object -First 1 -ExpandProperty FullName
    
    # If no zip file found, break out of the loop
    if (-not $currentZip) {
        Write-Host "No zip file found in iteration $i"
        break
    }

    # Create a unique temporary directory for the extraction
    $tempDirectory = Join-Path $workDirectory ("tempUnzip" + $i)
    New-Item -Path $tempDirectory -ItemType Directory -Force

    # Unzip the file to the temporary directory
    Expand-Archive -Path $currentZip -DestinationPath $tempDirectory -Force

    # Move the contents from the temporary directory back to the working directory
    Move-Item -Path "$tempDirectory\*" -Destination $workDirectory -Force

    # Remove the original zip file of this iteration and the temporary directory
    Remove-Item -Path $currentZip -Force
    Remove-Item -Path $tempDirectory -Force
}

# At the end of the loop, assuming the final file is not a zip, read its contents
$finalFile = Get-ChildItem -Path $workDirectory | Where-Object { $_.Extension -ne ".zip" } | Select-Object -First 1 -ExpandProperty FullName
Get-Content -Path $finalFile



Copy-Item -Path "C:\Users\CTF\Documents\Omega1000.zip" -Destination "C:\Users\CTF\Desktop\Omega1000.zip"

$workDirectory = "C:\Users\CTF\Documents"

for ($i = 0; $i -lt 1000; $i++) {
    $currentZip = Get-ChildItem -Path $workDirectory -Filter "*.zip" | Select-Object -First 1 -ExpandProperty FullName
    if (-not $currentZip) {
        Write-Host "No zip file found in iteration $i"
        break
    }
    $tempDirectory = Join-Path $workDirectory ("tempUnzip" + $i)
    New-Item -Path $tempDirectory -ItemType Directory -Force
    Expand-Archive -Path $currentZip -DestinationPath $tempDirectory -Force
    Move-Item -Path "$tempDirectory\*" -Destination $workDirectory -Force
    Remove-Item -Path $currentZip -Force
    Remove-Item -Path $tempDirectory -Force
}

$finalFile = Get-ChildItem -Path $workDirectory | Where-Object { $_.Extension -ne ".zip" } | Select-Object -First 1 -ExpandProperty FullName
Get-Content -Path $finalFile



###########################################################################################################################################
#########################################################                         #########################################################
#########################################################    Linux Boot Process   #########################################################
#########################################################                         #########################################################
###########################################################################################################################################

Windows
AB 
C 

Linux
sdX - standard drive
vdX - virtual drive 

Commands
lsblk - list block devices 

dd -> data duplicate alias data destroyer. Should take an input file 
e.g dd if=/dev/vda of=MBRCopy bs=512 count=1

take data from dev/vda and copy it..... copy the block size of 512 and do a count of 1. 
You don't really need of=MBRCopy

e.g modify the 3rd partition - refer to https://os.cybbh.io/public/os/latest/007_linux_boot_process/linboot_fg.html

would be

dd if=/dev/vda bs=1 count=16 skip=478 | md5sum

essentially you're doing a count of 16, 3rd partition has 16 bytes and is located at 478. 

When you get permission denied, do a sudo !! and rerun. 

GPT (Guid Partition Tables) -> 

ltrace -S cat cat /etc/passwd -> tracking system calls that happens

ltrace -S lsmod -> task lists /n listing out all the modules 

sbin -> special binary 

SysV -> specifics of SysV

ps --ppid 2 ->ppid (parent process id) ps -> (process status) get the process status, with the parent process id element 2! 



To go to the top of the directory in linux do >>> cd / <<<
To go to the top the home directory in linux do >>> cd ~ <<<
ls -l >> long listing.. shows you the permission settings 

################# GETTING HELP ######################
man <command> 
so >> ls man >> 
ls --help -> gives you what the command is 
>> man -k hash >> key word seaching.... 
>> man man >> then type >> /ls >> ls represents what you are searching 
whatis <command> 


################# SEARCHING HELP ######################

ps 
    reporst a snapshot of the current process. Reports the bare minimum of what you need? 
ps --help >> gives you a one liner 
    . means it's a hidden file 

ls -la >> reveals hidden files 

ps -e >> shows running processes 
ps -el >> gives long listing 
ps -elf >>  tag formating -- gives all the information 

id 

grep -R 'network' /etc | grep -v denied


awk -F ':''OFS="-"{print$1,$2,$3}'/etc/passwd



awk -F ':' 'OFS="-"{print$1,$2,$3}' /etc/passwd

This command uses awk to process the contents of the /etc/passwd file. Here's a breakdown of what it does:

-F ':': This sets the field separator to a colon (:). This means awk will treat each colon-separated value in a line as a separate field. In the /etc/passwd file, lines are usually formatted as username:password:UID:GID:full_name:home_directory:shell.

OFS="-": This sets the output field separator to a hyphen (-). This determines how awk will join fields together when it prints them out.

{print $1,$2,$3}: This instructs awk to print the first, second, and third fields of each line (i.e., username, password, and UID).

In summary, the command will read the /etc/passwd file and print the username, password, and UID for each line, separated by hyphens. For example, if a line in /etc/passwd reads:

hardware abstraction layer - HALDLL

bcdedit --> gives information about how the computer spins up.... 
ntoskernel - windows version of kernel

sc qdescription 


Get-LocalUser | select Name, SID 

R is content I is path.... 



Prefetch -> Wanted to add anything to this???



Remember persistence mechanisms and how they pertain to both windows and linux... bashrc, would you be able to integrate that mechanism? 



///////////////////////////////// USING THE PIPE ////////////////////////////////

The | symbol, often referred to as a "pipe," is used in PowerShell (and other shell environments) to pass the output of one command as input to another command. This allows for the chaining of commands, where the result of one command can be processed or transformed by subsequent commands.

The concept of piping is fundamental to shell scripting and command-line usage, enabling the composition of complex operations from simpler ones without the need to create intermediate files or variables.

Here's a basic example to illustrate the concept:

Get-Process | Where-Object { $_.CPU -gt 10 } | Sort-Object CPU -Descending

In this example:

Get-Process retrieves a list of all running processes.
The output of Get-Process (which is a list of processes) is passed to Where-Object via the pipe (|). Where-Object filters this list to only include processes where the CPU usage is greater than 10.
The filtered list of processes is then passed to Sort-Object (again via a pipe), which sorts the processes based on CPU usage in descending order.
The entire command thus retrieves a sorted list of processes with a CPU usage greater than 10, all achieved through a combination of three simpler commands connected by pipes.

///////////////////////////////// USING THE PIPE END ////////////////////////////////

cd C:\Users\CTF\Desktop\CTF
Get-Content -Path .\words.txt | Where-Object { $_ -match "aa[a-g]" } | Measure-Object | ForEach-Object { $_.Count }

What PowerShell command searches for text patterns in a string? - Select-String


What help switch will show you the "help files" on Microsoft's website, in your default browser? -online
What PowerShell command (without using a method) will stop the Chrome process? - Stop-Process -name chrome 


What PowerShell command will allow for counting lines in a file, averaging numbers, and summing numbers? - Measure-Object

PowerShell "help files" don't show the entire help file with a basic command. What switch option shows the entire help file? -full

What command will start the Chrome browser on your machine? - Start-Process chrome


PowerShell doesn't have a native cmdlet that will give you processor information (such as get-processor or get-cpu). Knowing this information might be necessary. What command would give you information about the system's processor? Flag is the full command - 

What PS command will list all PowerShell cmdlets? - Get-Command

All PowerShell objects are comprised of what two things? Flag format: things,things - methods, properties

What PowerShell command lists all of the contents of a directory? - Get-ChildItem

What PowerShell command will update the PowerShell "help files" to the latest version? - Update-Help

What command using a PS Method will stop chrome? Flag is the full command. - (Get-Process -Name chrome).Kill()

What PowerShell command will read a text file? - Get-Content

Users' files are stored in their corresponding home directory. What is the literal path to all home directories on a Windows 10 system? - C:\Users\

How many properties are available for the get-process cmdlet? Note: Property values only - (Get-Process | Get-Member -MemberType 'Property').count




