///////////////////////////////// USING THE PIPE ////////////////////////////////

The | symbol, often referred to as a "pipe," is used in PowerShell (and other shell environments) to pass the output of one command as input to another command. This allows for the chaining of commands, where the result of one command can be processed or transformed by subsequent commands.

The concept of piping is fundamental to shell scripting and command-line usage, enabling the composition of complex operations from simpler ones without the need to create intermediate files or variables.

Here's a basic example to illustrate the concept:

Get-Process | Where-Object { $_.CPU -gt 10 } | Sort-Object CPU -Descending

In this example:

Get-Process retrieves a list of all running processes.
The output of Get-Process (which is a list of processes) is passed to Where-Object via the pipe (|). Where-Object filters this list to only include processes where the CPU usage is greater than 10.
The filtered list of processes is then passed to Sort-Object (again via a pipe), which sorts the processes based on CPU usage in descending order.
The entire command thus retrieves a sorted list of processes with a CPU usage greater than 10, all achieved through a combination of three simpler commands connected by pipes.

///////////////////////////////// USING THE PIPE END ////////////////////////////////

cd C:\Users\CTF\Desktop\CTF
Get-Content -Path .\words.txt | Where-Object { $_ -match "aa[a-g]" } | Measure-Object | ForEach-Object { $_.Count }

What PowerShell command searches for text patterns in a string? - Select-String


What help switch will show you the "help files" on Microsoft's website, in your default browser? -online
What PowerShell command (without using a method) will stop the Chrome process? - Stop-Process -name chrome 


What PowerShell command will allow for counting lines in a file, averaging numbers, and summing numbers? - Measure-Object

PowerShell "help files" don't show the entire help file with a basic command. What switch option shows the entire help file? -full

What command will start the Chrome browser on your machine? - Start-Process chrome


PowerShell doesn't have a native cmdlet that will give you processor information (such as get-processor or get-cpu). Knowing this information might be necessary. What command would give you information about the system's processor? Flag is the full command - 

What PS command will list all PowerShell cmdlets? - Get-Command

All PowerShell objects are comprised of what two things? Flag format: things,things - methods, properties

What PowerShell command lists all of the contents of a directory? - Get-ChildItem

What PowerShell command will update the PowerShell "help files" to the latest version? - Update-Help

What command using a PS Method will stop chrome? Flag is the full command. - (Get-Process -Name chrome).Kill()

What PowerShell command will read a text file? - Get-Content

Users' files are stored in their corresponding home directory. What is the literal path to all home directories on a Windows 10 system? - C:\Users\

How many properties are available for the get-process cmdlet? Note: Property values only - (Get-Process | Get-Member -MemberType 'Property').count


# Backup the zip file
Copy-Item -Path "C:\Users\CTF\Documents\Omega1000.zip" -Destination "C:\Users\CTF\Desktop\Omega1000.zip"

# Set the initial zip file path
$zipFilePath = "C:\Users\CTF\Documents\Omega1000.zip"

# Loop to unzip the file 1,000 times
for ($i = 0; $i -lt 1000; $i++) {
    # Unzip the file
    Expand-Archive -Path $zipFilePath -DestinationPath "C:\Users\CTF\Documents"
    
    # Update the zipFilePath to the newly extracted file (assuming there's only one file in each zip)
    $zipFilePath = Get-ChildItem -Path "C:\Users\CTF\Documents" | Where-Object { $_.Name -ne "Omega1000.zip" } | Select-Object -First 1 -ExpandProperty FullName
}

# At the end of the loop, read the contents of the file
Get-Content -Path $zipFilePath


Backup the .zip file:
Copy-Item -Path "path_to_the_Omega_file.zip" -Destination "backup_directory_path"


For this step, let's assume that every time you unzip the Omega file, you get another .zip file until you've done this 1,000 times and then you get a readable file (e.g., a .txt file). Here's how you can do this with a loop:
$iteration = 0
$unzipPath = "path_where_you_want_to_unzip"

while ($iteration -lt 1000) {
    # Unzipping
    Expand-Archive -Path "C:\Users\CTF\Documents" -C:\Users\CTF\Desktop $unzipPath -Force

    # Assuming the unzipped content gives another zip file named 'Omega.zip'
    $newZipPath = Join-Path -Path $unzipPath -ChildPath "Omega.zip"

    if (Test-Path $newZipPath) {
        # Preparing for the next iteration
        Move-Item -Path $newZipPath -Destination "path_to_the_Omega_file.zip" -Force
        $iteration++
    } else {
        # If we don't find a zip file, we break out of the loop assuming we've reached the final content
        break
    }
}

# At this point, the final unzipped content should be in the $unzipPath directory. We'll display it:
Get-ChildItem $unzipPath

# If it's a text file, you can read it with:
Get-Content "path_to_final_unzipped_text_file.txt"

>>>>>>>>>>>>>>>>>>> If you need to search for the omega file >>>>>>>>>>>>>

Get-ChildItem -Path "StartingDirectory" -Recurse -File | Where-Object { $_.Name -eq "FileName.ext" }

StartingDirectory: Replace this with the directory where you want to start your search. For example, C:\ to start from the root of the C drive.
FileName.ext: Replace this with the name of the file you're searching for, including its extension.

Get-ChildItem -Path "C:\" -Recurse -File | Where-Object { $_.Name -eq "document.txt" }

To search for a file ending in .zip files -- Get-ChildItem -Path "C:\" -Recurse -File -Filter "*.zip"


# Backup the zip file
Copy-Item -Path "C:\Users\CTF\Documents\Omega1000.zip" -Destination "C:\Users\CTF\Desktop\Omega1000.zip"

# Initial directory to work in
$workDirectory = "C:\Users\CTF\Documents"

# Loop to unzip the file 1,000 times
for ($i = 0; $i -lt 1000; $i++) {
    # Get the path of the zip file in the current iteration
    $currentZip = Get-ChildItem -Path $workDirectory -Filter "*.zip" | Select-Object -First 1 -ExpandProperty FullName
    
    # Unzip the file
    Expand-Archive -Path $currentZip -DestinationPath $workDirectory

    # Remove the original zip file of this iteration to avoid c$onfusion in the next iteration
    Remove-Item -Path $currentZip
}

# At the end of the loop, assuming the final file is not a zip, read its contents
$finalFile = Get-ChildItem -Path $workDirectory | Where-Object { $_.Extension -ne ".zip" } | Select-Object -First 1 -ExpandProperty FullName
Get-Content -Path $finalFile




$workDirectory = "C:\Users\CTF\Documents"

for ($i = 0; $i -lt 1000; $i++) {
    $currentZip = Get-ChildItem -Path $workDirectory -Filter "*.zip" | Select-Object -First 1 -ExpandProperty FullName
    Expand-Archive -Path $currentZip -DestinationPath $workDirectory
    Remove-Item -Path $currentZip
}
$finalFile = Get-ChildItem -Path $workDirectory | Where-Object { $_.Extension -ne ".zip" } | Select-Object -First 1 -ExpandProperty FullName
Get-Content -Path $finalFile



# Backup the zip file
Copy-Item -Path "C:\Users\CTF\Documents\Omega1000.zip" -Destination "C:\Users\CTF\Desktop\Omega1000.zip"

# Initial directory to work in
$workDirectory = "C:\Users\CTF\Documents"

# Loop to unzip the file 1,000 times
for ($i = 0; $i -lt 1000; $i++) {
    # Get the path of the zip file in the current iteration
    $currentZip = Get-ChildItem -Path $workDirectory -Filter "*.zip" | Select-Object -First 1 -ExpandProperty FullName
    
    # If no zip file found, break out of the loop
    if (-not $currentZip) {
        Write-Host "No zip file found in iteration $i"
        break
    }

    # Unzip the file
    Expand-Archive -Path $currentZip -DestinationPath $workDirectory

    # Remove the original zip file of this iteration to avoid confusion in the next iteration
    Remove-Item -Path $currentZip
}

# At the end of the loop, assuming the final file is not a zip, read its contents
$finalFile = Get-ChildItem -Path $workDirectory | Where-Object { $_.Extension -ne ".zip" } | Select-Object -First 1 -ExpandProperty FullName
Get-Content -Path $finalFile

Copy-Item -Path "C:\Users\CTF\Desktop\Omega1000.zip" -Destination "C:\Users\CTF\Documents\Omega1000.zip"


Copy-Item -Path "C:\Users\CTF\Documents\Omega1000.zip" -Destination "C:\Users\CTF\Desktop\Omega1000.zip"
$workDirectory = "C:\Users\CTF\Documents"
for ($i = 0; $i -lt 1000; $i++) {
    $currentZip = Get-ChildItem -Path $workDirectory -Filter "*.zip" | Select-Object -First 1 -ExpandProperty FullName
    if (-not $currentZip) {
        Write-Host "No zip file found in iteration $i"
        break
    }
    Expand-Archive -Path $currentZip -DestinationPath $workDirectory

    Remove-Item -Path $currentZip
}
$finalFile = Get-ChildItem -Path $workDirectory | Where-Object { $_.Extension -ne ".zip" } | Select-Object -First 1 -ExpandProperty FullName
Get-Content -Path $finalFile


# Backup the zip file
Copy-Item -Path "C:\Users\CTF\Documents\Omega1000.zip" -Destination "C:\Users\CTF\Desktop\Omega1000.zip"

# Initial directory to work in
$workDirectory = "C:\Users\CTF\Documents"

# Loop to unzip the file 1,000 times
for ($i = 0; $i -lt 1000; $i++) {
    # Get the path of the zip file in the current iteration
    $currentZip = Get-ChildItem -Path $workDirectory -Filter "*.zip" | Select-Object -First 1 -ExpandProperty FullName
    
    # If no zip file found, break out of the loop
    if (-not $currentZip) {
        Write-Host "No zip file found in iteration $i"
        break
    }

    # Create a unique temporary directory for the extraction
    $tempDirectory = Join-Path $workDirectory ("tempUnzip" + $i)
    New-Item -Path $tempDirectory -ItemType Directory -Force

    # Unzip the file to the temporary directory
    Expand-Archive -Path $currentZip -DestinationPath $tempDirectory -Force

    # Move the contents from the temporary directory back to the working directory
    Move-Item -Path "$tempDirectory\*" -Destination $workDirectory -Force

    # Remove the original zip file of this iteration and the temporary directory
    Remove-Item -Path $currentZip -Force
    Remove-Item -Path $tempDirectory -Force
}

# At the end of the loop, assuming the final file is not a zip, read its contents
$finalFile = Get-ChildItem -Path $workDirectory | Where-Object { $_.Extension -ne ".zip" } | Select-Object -First 1 -ExpandProperty FullName
Get-Content -Path $finalFile


Copy-Item -Path "C:\Users\CTF\Documents\Omega1000.zip" -Destination "C:\Users\CTF\Desktop\Omega1000.zip"

$workDirectory = "C:\Users\CTF\Documents"

for ($i = 0; $i -lt 1000; $i++) {
    $currentZip = Get-ChildItem -Path $workDirectory -Filter "*.zip" | Select-Object -First 1 -ExpandProperty FullName
    if (-not $currentZip) {
        Write-Host "No zip file found in iteration $i"
        break
    }
    $tempDirectory = Join-Path $workDirectory ("tempUnzip" + $i)
    New-Item -Path $tempDirectory -ItemType Directory -Force
    Expand-Archive -Path $currentZip -DestinationPath $tempDirectory -Force
    Move-Item -Path "$tempDirectory\*" -Destination $workDirectory -Force
    Remove-Item -Path $currentZip -Force
    Remove-Item -Path $tempDirectory -Force
}

$finalFile = Get-ChildItem -Path $workDirectory | Where-Object { $_.Extension -ne ".zip" } | Select-Object -First 1 -ExpandProperty FullName
Get-Content -Path $finalFile


