


Incorrect: File "py_act_29", line 73, in test_dict line 7, in sort_embedded sorted_temp = sorted(temp, key=lambda s: int(s[10:16])) line 7, in <lambda>











def get_hash(data="python"):
    '''
    Returns the SHA3 256-bit hash of the data provided.
    You will need to use the hashlib python library to complete this challenge.
       
    NOTE: The first call will use the string "python" later calls will use random strings
    NOTE: You can convert a string into a bytes-like object which is needed for hashing with: 
             
    data.encode("utf-8")
    
    NOTE: You can create a bytes-like object out of a literal by adding a b in front of the string, ie b"python" or b'python'
       
    Args:
        data (str): data to be encoded
    Returns:
        str : The SHA3 256-bit hash of the provided data
    '''    















ef evensandodds(first, last):
    
    for i in range(first, last + 1):
        if i % 2 == 0:
            print(i)

    
    for i in range(first, last + 1):
        if i % 2 != 0:
            print(i)



def get_hash(data="python"):
    '''
    Returns the SHA3 256-bit hash of the data provided.
    You will need to use the hashlib python library to complete this challenge.
       
    NOTE: The first call will use the string "python" later calls will use random strings
    NOTE: You can convert a string into a bytes-like object which is needed for hashing with: 
             
    data.encode("utf-8")
    
    NOTE: You can create a bytes-like object out of a literal by adding a b in front of the string, ie b"python" or b'python'
       
    Args:
        data (str): data to be encoded
    Returns:
        str : The SHA3 256-bit hash of the provided data
    '''
    # Convert the data string to a bytes-like object
    data_bytes = data.encode("utf-8")
    
    # Create a SHA3-256 hash object
    hash_obj = hashlib.sha3_256(data_bytes)
    
    # Return the hexadecimal representation of the hash
    return hash_obj.hexdigest()





************************ 18 ***************************************


############################# SOLUTION ##############################












coding python core
Use python to produce code below that will perform the following:

Read file specified by the path in inpath parameter and write all lines to the file specified by the outpath parameter.
Before writing out each line, add the line number starting with 1 follow by colon and space.
def linenums(inpath, outpath):
    pass 



with open(inpath, 'r') as inpath_file:
        inpath_file_outpt = inpath_file.readlines()

    with open(outpath, 'w') as outfile:
        for index, line in enumerate(inpath_file_outpt, start=1):
            outfile.write(f"{index}: {line}")









Write a function, round_to_position, which takes a list of floats and returns a new list with the original floats each rounded to the number of digits of precision after the decimal point corresponding to the original float's position in the list.

def round_to_position(lst):
    return [round(value, index) for index, value in enumerate(lst)]


















def get_type_str(obj):
    '''
    Returns the type of the parameter as a string.
    Possible types are:
    

      
string

      
boolean

      
integer

      
float

      
list

      
tuple

    

    NOTE: Any other types should be identified with 'unknown'
       
    Args:
        obj (?): The object that should be classified
    Returns:    if "def" not in code:
        return "missing def"
    if ":" not in code:
        return "missing :"
    if "(" not in code or ")" not in code:
        return "missing paren"
    if "(" + ")" in code:
        return "missing param"
    if "    " not in code:
        return "missing indent"
    if "validate" not in code:
        return "wrong name"
    if "return" not in code:
        return "missing return"
    return True









    def sort_ascii(filepath):
    '''
    Read all lines from file in `filepath` and return a list of all lines in case-insensitive ASCII order.
    Remove all linebreaks before sorting.
       
    Args:
        filepath (str): The path to the file
    Returns:
        list : lines from input file sorted into ASCII order without linebreaks


    with open(filepath, 'r') as file:
            # Read lines, strip whitespace and linebreaks
            lines = [line.strip() for line in file.readlines()]
            
        # Sort lines in case-insensitive ASCII order
        sorted_lines = sorted(lines, key=lambda s: s.lower())
        
        return sorted_lines

with open(filepath, 'r') as file:
        # Read lines and strip linebreaks and whitespace
        lines = [line.strip() for line in file.readlines()]
        
    # Sort lines by the embedded number in positions 10 to 15
    sorted_lines = sorted(lines, key=lambda s: int(s[10:16]))
    
    return sorted_lines









# Example usage:
# Assuming you have a 'sample.txt' file.
# sorted_list = sort_ascii('sample.txt')
# print(sorted_list)
The sorted function uses a key function to sort in case-insensitive manner. The lambda s: s.lower() function converts each string to lowercase before comparing for sorting, ensuring case-insensitive ASCII order.


















def sort_length(filepath):
    '''
    Read all lines from file in `filepath` and return a list of all lines sorted longest to shortest.
    Remove all linebreaks before sorting.
       
    Args:
        filepath (str): The path to the file
    Returns:
        list : lines from input file sorted longest to shortest without linebreaks






















def sort_embedded(filepath):
    '''
    Read all lines from file in `filepath` and return a list of all lines sorted numerically by
    the number at character positions 10 to 15 in each line..
    Remove all linebreaks before sorting.
    
    Example: The embedded number is 561234 below. Copy and paste this into a text file to test your function:
		
    Here is a561234 long line of text from the file.
       
    Args:
        filepath (str): The path to the file
    Returns:
        list : lines from input file numerically sorted on the embedded number without linebreaks



def validate(code):

    if "def" not in code:
        return "missing def"
    if ":" not in code:
        return "missing :"
    if "(" not in code or ")" not in code:
        return "missing paren"
    if "(" + ")" in code:
        return "missing param"
    if "    " not in code:
        return "missing indent"
    if "validate" not in code:
        return "wrong name"
    if "return" not in code:
        return "missing return"
    return True


def validate(code):
    if "def" not in code:
        return "missing def"
    if ":" not in code:
        return "missing :"
    if "(" not in code or ")" not in code:
        return "missing paren"
    if "("+")" in code:
        return "missing param"
    if "    " not in code:
        return "missing indent"
    if "validate" not in code:
        return "wrong name"
    if "return" not in code:
        return "missing return"
    
    return True

code_to_validate = 'def validate(one):\n    return print(123)\n'

print(validate(code_to_validate))  # Output should be True

#print(validate('def foo():\n print(123)'))
#The call validate('def foo():\n print(123)') 
#should return 'missing param', but it returned 'wrong name'






def numsys(startint):
    """ Given an integer `startint`, convert this integer to its 
    binary version, octal version, and hexadecimal version and 
    return these as a tuple in the order given. """
    
    # Convert to binary, octal, and hexadecimal
    binary_num = bin(startint)[2:] # [2:] is used to remove the '0b' prefix
    octal_num = oct(startint)[2:]  # [2:] is used to remove the '0o' prefix
    hex_num = hex(startint)[2:].upper()  # [2:] is used to remove the '0x' prefix and upper() is used to make the letters uppercase

    return (binary_num, octal_num, hex_num)


def getints(binnum, octnum, decnum, hexnum):
    """ Given the string parameters `binnum` (binary number), 
    `octnum` (octal number), decnum` (decimal number), `hexnum` 
    (hexadecimal number), convert each of these  to an integer and 
    return them as a list in their parameter order. """
    
    # Convert each string to its respective integer
    binary_int = int(binnum, 2)
    octal_int = int(octnum, 8)
    decimal_int = int(decnum)
    hex_int = int(hexnum, 16)

    return [binary_int, octal_int, decimal_int, hex_int]


def literals():
    """ Create a list and set the value using literals and return 
    the list. All literals will represent the decimal integer value 
    1,000,000 (one million). You must use a literal to represent 
    the target value in binary, hexadecimal, decimal, and octal.
    The order is not important. """
    
    # Using literals to represent 1,000,000
    bin_literal = 0b11110100001001000000  # binary
    hex_literal = 0xF4240                # hexadecimal
    dec_literal = 1000000                # decimal
    oct_literal = 0o3641100              # octal

    return [bin_literal, hex_literal, dec_literal, oct_literal]

# You can test the functions with appropriate values to see if they work correctly.


def numsys(startint):
    """ Given an integer `startint`, convert this integer to its 
    binary version, octal version, and hexadecimal version and 
    return these as a tuple in the order given. """
    
    # Convert to binary, octal, and hexadecimal with prefixes
    binary_num = bin(startint)
    octal_num = oct(startint)
    hex_num = hex(startint)

    return (binary_num, octal_num, hex_num)


def getints(binnum, octnum, decnum, hexnum):
    """ Given the string parameters `binnum` (binary number), 
    `octnum` (octal number), decnum` (decimal number), `hexnum` 
    (hexadecimal number), convert each of these  to an integer and 
    return them as a list in their parameter order. """
    
    # Convert each string to its respective integer
    binary_int = int(binnum, 2)
    octal_int = int(octnum, 8)
    decimal_int = int(decnum)
    hex_int = int(hexnum, 16)

    return [binary_int, octal_int, decimal_int, hex_int]


def literals():
    """ Create a list and set the value using literals and return 
    the list. All literals will represent the decimal integer value 
    1,000,000 (one million). You must use a literal to represent 
    the target value in binary, hexadecimal, decimal, and octal.
    The order is not important. """
    
    # Using literals to represent 1,000,000
    bin_literal = 0b11110100001001000000  # binary
    hex_literal = 0xf4240                # hexadecimal in lowercase
    dec_literal = 1000000                # decimal
    oct_literal = 0o3641100              # octal

    return [bin_literal, hex_literal, dec_literal, oct_literal]





import string

def complexity(password):
    """ Evaluate the complexity of a given password and return an integer
    whose bits are set according to the defined rules. """

    # Initialize the result to 0
    result = 0

    # Check each condition and set the appropriate bit
    if len(password) >= 15:
        result |= 0x1
    if any(char.isdigit() for char in password):
        result |= 0x2
    if any(char.isupper() for char in password):
        result |= 0x4
    if any(char.islower() for char in password):
        result |= 0x8
    if any(char in string.punctuation for char in password):
        result |= 0x10

    return result

# You can test the function with different passwords to check its correctness.





def perms(mode):
    """ Convert a Linux file mode (permissions) into its corresponding string representation. """

    # Define the permission bits and their corresponding characters
    PERMISSIONS = {
        4: 'r',
        2: 'w',
        1: 'x',
    }

    # Extract the permission bits for user, group, and others
    user_perms = (mode >> 6) & 0b111
    group_perms = (mode >> 3) & 0b111
    other_perms = mode & 0b111

    # Convert the permission bits into their string representation
    def get_perm_str(perms_bits):
        return ''.join(PERMISSIONS.get(bit, '-') for bit in [4, 2, 1] if bit & perms_bits)

    # Generate the full permission string
    perm_str = get_perm_str(user_perms) + get_perm_str(group_perms) + get_perm_str(other_perms)

    return perm_str

# Test cases
print(perms(511))  # Expected: 'rwxrwxrwx'
print(perms(424))  # Expected: 'rw-r-x---'































def perms(mode):
    """ Convert a Linux file mode (permissions) into its corresponding string representation. """

    # Define the permission characters for each permission bit
    PERMISSIONS = ['r', 'w', 'x']

    # Convert the permission bits into their string representation
    def get_perm_str(perms_bits):
        perm_str = ''
        for idx, char in enumerate(PERMISSIONS):
            perm_str += char if perms_bits & (1 << (2 - idx)) else '-'
        return perm_str

    # Extract the permission bits for user, group, and others and generate the string
    user_perms = (mode >> 6) & 0b111
    group_perms = (mode >> 3) & 0b111
    other_perms = mode & 0b111

    return get_perm_str(user_perms) + get_perm_str(group_perms) + get_perm_str(other_perms)

# Test cases
print(perms(511))  # Expected: 'rwxrwxrwx'
print(perms(424))  # Expected: 'rw-r-x---'



print(q1("", True, 2000000))  # Should return 0x1 | 0x10 | 0x20 = 49
print(q1("test.txt", False, 500000))  # Should return 0
print(q1("", False, 500000))  # Should return 0x1 = 1


def q1(filename, overwrite, bytestowrite):
    """ Create and return a number based on the given conditions. """

    # Initialize the result to 0
    result = 0

    # Check each condition and set the appropriate bit
    if not filename:
        result |= 0x1
    if overwrite:
        result |= 0x10
    if bytestowrite > 1000000:
        result |= 0x20

    return result












Given a dictionary (catalog) whose keys are product names and values are product prices per unit and a list of tuples (order) of product names and quantities, compute and return the total value of the order.

Example catalog:

{
'AMD Ryzen 5 5600X': 289.99,
'Intel Core i9-9900K': 363.50,
'AMD Ryzen 9 5900X': 569.99
}
Example order:

[
('AMD Ryzen 5 5600X', 5), 
('Intel Core i9-9900K', 3)
]
Example result:

2540.45

How the above result was computed:

(289.99 * 5) + (363.50 * 3)

def q6(catalog, order):
    pass


DO NOT USE ONE LINERS