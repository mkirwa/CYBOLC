


Incorrect: File "py_act_29", line 73, in test_dict line 7, in sort_embedded sorted_temp = sorted(temp, key=lambda s: int(s[10:16])) line 7, in <lambda>







def get_hash(data="python"):
    '''
    Returns the SHA3 256-bit hash of the data provided.
    You will need to use the hashlib python library to complete this challenge.
       
    NOTE: The first call will use the string "python" later calls will use random strings
    NOTE: You can convert a string into a bytes-like object which is needed for hashing with: 
             
    data.encode("utf-8")
    
    NOTE: You can create a bytes-like object out of a literal by adding a b in front of the string, ie b"python" or b'python'
       
    Args:
        data (str): data to be encoded
    Returns:
        str : The SHA3 256-bit hash of the provided data
    '''    















ef evensandodds(first, last):
    
    for i in range(first, last + 1):
        if i % 2 == 0:
            print(i)

    
    for i in range(first, last + 1):
        if i % 2 != 0:
            print(i)



def get_hash(data="python"):
    '''
    Returns the SHA3 256-bit hash of the data provided.
    You will need to use the hashlib python library to complete this challenge.
       
    NOTE: The first call will use the string "python" later calls will use random strings
    NOTE: You can convert a string into a bytes-like object which is needed for hashing with: 
             
    data.encode("utf-8")
    
    NOTE: You can create a bytes-like object out of a literal by adding a b in front of the string, ie b"python" or b'python'
       
    Args:
        data (str): data to be encoded
    Returns:
        str : The SHA3 256-bit hash of the provided data
    '''
    # Convert the data string to a bytes-like object
    data_bytes = data.encode("utf-8")
    
    # Create a SHA3-256 hash object
    hash_obj = hashlib.sha3_256(data_bytes)
    
    # Return the hexadecimal representation of the hash
    return hash_obj.hexdigest()


















coding python core
Use python to produce code below that will perform the following:

Read file specified by the path in inpath parameter and write all lines to the file specified by the outpath parameter.
Before writing out each line, add the line number starting with 1 follow by colon and space.
def linenums(inpath, outpath):
    pass 



with open(inpath, 'r') as inpath_file:
        inpath_file_outpt = inpath_file.readlines()

    with open(outpath, 'w') as outfile:
        for index, line in enumerate(inpath_file_outpt, start=1):
            outfile.write(f"{index}: {line}")









Write a function, round_to_position, which takes a list of floats and returns a new list with the original floats each rounded to the number of digits of precision after the decimal point corresponding to the original float's position in the list.

def round_to_position(lst):
    return [round(value, index) for index, value in enumerate(lst)]


















def get_type_str(obj):
    '''
    Returns the type of the parameter as a string.
    Possible types are:
    

      
string

      
boolean

      
integer

      
float

      
list

      
tuple

    

    NOTE: Any other types should be identified with 'unknown'
       
    Args:
        obj (?): The object that should be classified
    Returns:
        str : The type of the provided data
    '''   























    def sort_ascii(filepath):
    '''
    Read all lines from file in `filepath` and return a list of all lines in case-insensitive ASCII order.
    Remove all linebreaks before sorting.
       
    Args:
        filepath (str): The path to the file
    Returns:
        list : lines from input file sorted into ASCII order without linebreaks


    with open(filepath, 'r') as file:
            # Read lines, strip whitespace and linebreaks
            lines = [line.strip() for line in file.readlines()]
            
        # Sort lines in case-insensitive ASCII order
        sorted_lines = sorted(lines, key=lambda s: s.lower())
        
        return sorted_lines

with open(filepath, 'r') as file:
        # Read lines and strip linebreaks and whitespace
        lines = [line.strip() for line in file.readlines()]
        
    # Sort lines by the embedded number in positions 10 to 15
    sorted_lines = sorted(lines, key=lambda s: int(s[10:16]))
    
    return sorted_lines









# Example usage:
# Assuming you have a 'sample.txt' file.
# sorted_list = sort_ascii('sample.txt')
# print(sorted_list)
The sorted function uses a key function to sort in case-insensitive manner. The lambda s: s.lower() function converts each string to lowercase before comparing for sorting, ensuring case-insensitive ASCII order.


















def sort_length(filepath):
    '''
    Read all lines from file in `filepath` and return a list of all lines sorted longest to shortest.
    Remove all linebreaks before sorting.
       
    Args:
        filepath (str): The path to the file
    Returns:
        list : lines from input file sorted longest to shortest without linebreaks






















def sort_embedded(filepath):
    '''
    Read all lines from file in `filepath` and return a list of all lines sorted numerically by
    the number at character positions 10 to 15 in each line..
    Remove all linebreaks before sorting.
    
    Example: The embedded number is 561234 below. Copy and paste this into a text file to test your function:
		
    Here is a561234 long line of text from the file.
       
    Args:
        filepath (str): The path to the file
    Returns:
        list : lines from input file numerically sorted on the embedded number without linebreaks