*************** CAPITAL INDEXES SOLUTION ***************

DEF CAPITAL_INDEXES(PARAM):
    LISTCAPITAL = []
    FOR I IN RANGE(0,LEN(PARAM)):
        IF PARAM[I].ISUPPER():
            LISTCAPITAL.APPEND(I)
    RETURN LISTCAPITAL
        
CAPITAL_INDEXES('RENTAL')

*************** MIDDLE LETTER SOLUTION ***************

IMPORT MATH

DEF MID(STRING_MID):
    LIST_MID_STRING = LIST(STRING_MID)
    IF LEN(LIST_MID_STRING)%2==0:
        RETURN ""
    ELSE:
        INDEX_STRING = MATH.CEIL(LEN(LIST_MID_STRING)/2)
        RETURN LIST_MID_STRING[INDEX_STRING-1]

PRINT(MID("ABC"))
PRINT(MID("AAAA"))


*************** ONLINE STATUS SOLUTION ***************

DEF ONLINE_COUNT(STATUSES):
    COUNT = 0
    FOR KEY, VALUE IN STATUSES.ITEMS():
        IF VALUE=='ONLINE':
            COUNT+=1
    RETURN COUNT

STATUSES = {
    "ALICE": "ONLINE",
    "BOB": "OFFLINE",
    "EVE": "ONLINE",
}
ONLINE_COUNT(STATUSES)


*************** RANDOMNESS SOLUTION ***************

IMPORT RANDOM
DEF RANDOM_NUMBER():
    RETURN RANDOM.RANDINT(0,101)
PRINT(RANDOM_NUMBER())

*************** TYPE CHECK SOLUTION ***************

DEF ONLY_INTS(PARAM1, PARAM2):
    PARAM1_TYPE = TYPE(PARAM1)
    PARAM2_TYPE = TYPE(PARAM2)
    IF 'INT' IN STR(PARAM1_TYPE) AND 'INT' IN STR(PARAM2_TYPE):
        RETURN TRUE
    ELSE:
        RETURN FALSE
    
ONLY_INTS(1,2)

*************** DOUBLE LETTERS SOLUTION ***************

DEF DOUBLE_LETTERS(PARAM_1):
    PARAM_1_NEW = LIST(STR(PARAM_1))
    TEMP_1 = LEN(PARAM_1_NEW)
    DOUBLE_LETTERS_PRESENT = FALSE
    FOR I IN RANGE(TEMP_1):
        IF I<TEMP_1-1:
            IF PARAM_1_NEW[I]==PARAM_1_NEW[I+1]:
                DOUBLE_LETTERS_PRESENT = TRUE
    RETURN DOUBLE_LETTERS_PRESENT
                
PRINT(DOUBLE_LETTERS('HELO'))  

*************** ADDING AND REMOVING DOTS SOLUTION ***************

DEF ADD_DOTS(STRING_DOTS):
    NEW_STRING = '.'.JOIN(STRING_DOTS)
    RETURN NEW_STRING
    
DEF REMOVE_DOTS(STRING_DOTS):
    NEW_STRING = STRING_DOTS.REPLACE('.','')
    RETURN NEW_STRING
    

*************** COUNTING SYLLABLES SOLUTION ***************

DEF COUNT(STRING_NEW):
    COUNT_DASH = 0
    NUM = STRING_NEW.COUNT('-')
    IF NUM==0:
        COUNT_DASH = 1
    ELSE:
        COUNT_DASH = NUM + 1
    RETURN COUNT_DASH


*************** ANAGRAMS SOLUTION ***************

DEF IS_ANAGRAM(PARAM1, PARAM2):
    LIST_1 = LIST(PARAM1)
    LIST_1.SORT()
    LIST_2 = LIST(PARAM2)
    LIST_2.SORT()
    RETURN LIST_1==LIST_2
        

*************** FLATTEN A LIST SOLUTION ***************

DEF FLATTEN(LIST_1):
    NEW_LIST = []
    FOR I IN RANGE(0,LEN(LIST_1)):
        NEW_LIST = NEW_LIST + LIST_1[I]
    RETURN NEW_LIST

*************** MIN-MAXING SOLUTION ***************

DEF LARGEST_DIFFERENCE(LIST_1):
    NEW_LIST = LIST_1
    NEW_LIST.SORT()
    RETURN NEW_LIST[-1] - NEW_LIST[0]


*************** DIVISIBLE BY 3 SOLUTION ***************

DEF DIV_3(VAL):
    IF INT(VAL)%3 == 0:
        RETURN TRUE
    ELSE:
        RETURN FALSE

*************** TIC TAC TOE INPUT SOLUTION ***************

DEF GET_ROW_COL(VALUE_TEMP):
    BOARD = [["A1", "B1", "C1"],["A2", "B2", "C2"],["A3", "B3", "C3"]]
    LIST_TEMP = []
    FOR I IN RANGE(LEN(BOARD)):
        FOR J IN RANGE(LEN(BOARD[I])):
            IF VALUE_TEMP IN BOARD[I][J]:
                LIST_TEMP.APPEND(I)
                LIST_TEMP.APPEND(J)
                RETURN TUPLE(LIST_TEMP)
          
VALUE_TEMP = "A3"
PRINT(GET_ROW_COL(VALUE_TEMP))

*************** PALINDROME SOLUTION ***************

DEF PALINDROME(STRING):
    IF STRING==STRING[::-1]:
        RETURN TRUE
    ELSE:
        RETURN FALSE


*************** UP AND DOWN SOLUTION ***************

DEF UP_DOWN(NUM):
    NUM1 = INT(NUM) - 1
    NUM2 = INT(NUM) + 1
    TUPLE_NEW = (NUM1, NUM2)
    RETURN TUPLE_NEW

*************** CONSECUTIVE ZEROS SOLUTION ***************

DEF CONSECUTIVE_ZEROS(ZEROS_STR):
    COUNT = 0
    MAX_COUNT = 0 
    NEW_LIST = LIST(STR(ZEROS_STR))
    
    FOR I IN RANGE(0, LEN(NEW_LIST)):
        IF NEW_LIST[I]=='0':
            COUNT = COUNT + 1
            IF COUNT>MAX_COUNT:
                MAX_COUNT = COUNT
        ELSE:
            COUNT = 0
    RETURN MAX_COUNT       
    
CONSECUTIVE_ZEROS(1001101000110)

*************** ALL EQUAL SOLUTION ***************


DEF ALL_EQUAL(INPUT_LIST):
    IF NOT INPUT_LIST:
        RETURN TRUE
    
    FIRST_ELEMENT = INPUT_LIST[0]
    RETURN_VALUE = TRUE
    FOR I IN RANGE(0, LEN(INPUT_LIST)):
        IF FIRST_ELEMENT != INPUT_LIST[I]:
            RETURN_VALUE = FALSE
    RETURN RETURN_VALUE
   
INPUT_LIST = [1,2,1,1]
PRINT(ALL_EQUAL(INPUT_LIST))
    

*************** BOOLEAN AND SOLUTION ***************

DEF TRIPLE_AND(PARAM1, PARAM2, PARAM3):
    IF PARAM1==TRUE AND PARAM2==TRUE AND PARAM3==TRUE:
        RETURN TRUE
    ELSE:
        RETURN FALSE

*************** WRITING SHORT CODE SOLUTION ***************

DEF CONVERT(LIST_NUMBERS):
    RETURN LIST(MAP(STR,LIST_NUMBERS))


*************** CUSTOM ZIP SOLUTION ***************

DEF ZAP(LIST1, LIST2):
    NEW_TUPLE = LIST(MAP(LAMBDA X,Y:(X,Y), LIST1,LIST2))
    RETURN NEW_TUPLE

LIST1_ = [0, 1, 2, 3]
LIST2_ = [5, 6, 7, 8]
ZAP(LIST1_,LIST2_)

*************** SOLUTION VALIDATION SOLUTION ***************


DEF VALIDATE(CODE):
    IF "DEF" NOT IN CODE:
        RETURN "MISSING DEF"
    IF ":" NOT IN CODE:
        RETURN "MISSING :"
    IF "(" NOT IN CODE OR ")" NOT IN CODE:
        RETURN "MISSING PAREN"
    IF "("+")" IN CODE:
        RETURN "MISSING PARAM"
    IF "    " NOT IN CODE:
        RETURN "MISSING INDENT"
    IF "VALIDATE" NOT IN CODE:
        RETURN "WRONG NAME"
    IF "RETURN" NOT IN CODE:
        RETURN "MISSING RETURN"
    
    RETURN TRUE
    
CODE_TO_VALIDATE = 'DEF VALIDATE(ONE):\N    RETURN PRINT(123)\N'

PRINT(VALIDATE(CODE_TO_VALIDATE))  # OUTPUT SHOULD BE TRUE


*************** LIST XOR SOLUTION ***************

DEF LIST_XOR(N,LIST1,LIST2):
    FOR I, LIST1_ELEM IN ENUMERATE(LIST1):
        IF N==LIST1[I] AND N==LIST2[I] OR N!=LIST1[I] AND N!=LIST2[I]:
            N = FALSE
        ELSE:
            N = TRUE
        RETURN N

PRINT(LIST_XOR(1, [0, 0, 0], [4, 5, 6]))

*************** COUNTING PARAMETERS SOLUTION ***************

DEF PARAM_COUNT(*ARGS):
    RETURN LEN(ARGS)
PRINT(PARAM_COUNT(1,2,3))

*************** THOUSANDS SEPARATOR SOLUTION ***************

DEF FORMAT_NUMBER(PARAM):
    RETURN '{:,}'.FORMAT(PARAM)
PRINT(FORMAT_NUMBER(1000000))


